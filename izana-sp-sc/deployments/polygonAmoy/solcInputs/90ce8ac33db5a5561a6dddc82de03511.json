{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155MetadataURIUpgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../introspection/ERC165Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n *\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\n     *\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    /*\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\n        _setURI(uri_);\n\n        // register the supported interfaces to conform to ERC1155 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155);\n\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) external view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][to] = _balances[id][to].add(amount);\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            _balances[id][from] = _balances[id][from].sub(\n                amount,\n                \"ERC1155: insufficient balance for transfer\"\n            );\n            _balances[id][to] = _balances[id][to].add(amount);\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] = _balances[id][account].add(amount);\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        _balances[id][account] = _balances[id][account].sub(\n            amount,\n            \"ERC1155: burn amount exceeds balance\"\n        );\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n                amounts[i],\n                \"ERC1155: burn amount exceeds balance\"\n            );\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal\n        virtual\n    { }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721MetadataUpgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"../../introspection/ERC165Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/EnumerableSetUpgradeable.sol\";\nimport \"../../utils/EnumerableMapUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\n    using StringsUpgradeable for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSetUpgradeable.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMapUpgradeable.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721ReceiverUpgradeable(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n    uint256[41] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMapUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155MetadataURI.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n *\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\n     *\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    /*\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor (string memory uri_) public {\n        _setURI(uri_);\n\n        // register the supported interfaces to conform to ERC1155 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155);\n\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) external view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][to] = _balances[id][to].add(amount);\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            _balances[id][from] = _balances[id][from].sub(\n                amount,\n                \"ERC1155: insufficient balance for transfer\"\n            );\n            _balances[id][to] = _balances[id][to].add(amount);\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] = _balances[id][account].add(amount);\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        _balances[id][account] = _balances[id][account].sub(\n            amount,\n            \"ERC1155: burn amount exceeds balance\"\n        );\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n                amounts[i],\n                \"ERC1155: burn amount exceeds balance\"\n            );\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal\n        virtual\n    { }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/AddCollectionAddOn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AddCollectionAddOn is Ownable {\n    event AddCollection(address add_);\n    mapping(address => bool) private addressAdded;\n\n    function addCollection(address add_) external onlyOwner returns (bool) {\n        require(!addressAdded[add_]);\n        addressAdded[add_] = true;\n        emit AddCollection(add_);\n        return true;\n    }\n\n    function isAddedCollection(address add_) external view returns (bool) {\n        return addressAdded[add_];\n    }\n}\n"
    },
    "contracts/DefaultIzanaNFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./Store.sol\";\n\n/**\n * @title ERC1155Tradable\n * ERC1155Tradable - ERC1155 contract that whitelists a trading address, and has minting functionality.\n */\ncontract DefaultIzanaNFT1155 is ERC1155Upgradeable, OwnableUpgradeable {\n    using SafeMath for uint256;\n    string private _name;\n    string private _symbol;\n\n    address public exchangeAddress;\n    address public proxyRegistryAddress;\n    string private _extendedTokenURI;\n    string private contractURI_;\n\n    mapping(uint256 => string) private _eTokenURIs;\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        string memory _tokenURI,\n        string memory _contractURI,\n        address _proxyRegistryAddress,\n        address _exchangeAddress\n    ) external initializer {\n        __Ownable_init();\n        __ERC1155_init(_tokenURI);\n        _name = name_;\n        _symbol = symbol_;\n        proxyRegistryAddress = _proxyRegistryAddress;\n        _extendedTokenURI = _tokenURI;\n        exchangeAddress = _exchangeAddress;\n        contractURI_ = _contractURI;\n\n        transferOwnership(tx.origin);\n    }\n\n    function contractURI() external view returns (string memory) {\n        return contractURI_;\n    }\n\n    function mintTo(\n        address _to,\n        uint256 _tokenId,\n        uint256 amount,\n        bytes memory data,\n        string memory _metadataURI\n    ) public returns (uint256) {\n        _mint(_to, _tokenId, amount, data);\n        _eTokenURIs[_tokenId] = _metadataURI;\n        return _tokenId;\n    }\n\n    function transfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        uint256 amount,\n        bytes memory data,\n        string memory _metadataURI\n    ) external returns (uint256) {\n        uint256 balance = balanceOf(_from, _tokenId);\n        uint256 left = amount;\n        if (balance != 0) {\n            uint256 transfer_ = amount;\n            if (balance < amount) {\n                transfer_ = balance;\n            }\n            safeTransferFrom(_from, _to, _tokenId, transfer_, data);\n            left = amount - transfer_;\n        }\n        if (left > 0) {\n            _mint(_to, _tokenId, left, data);\n\n            string memory _tokenURI = _eTokenURIs[_tokenId];\n            if (bytes(_tokenURI).length == 0)\n                _eTokenURIs[_tokenId] = _metadataURI;\n        }\n        return _tokenId;\n    }\n\n    function baseTokenURI() public view virtual returns (string memory) {\n        return _extendedTokenURI;\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        string memory _tokenURI = _eTokenURIs[_tokenId];\n        string memory base = baseTokenURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, Strings.toString(_tokenId)));\n    }\n\n    function modifyExtendedURI(string memory extendedTokenURI_)\n        external\n        onlyOwner\n    {\n        _extendedTokenURI = extendedTokenURI_;\n    }\n\n\n    function modifyContractURI(string memory _contractURI)\n        external\n        onlyOwner\n    {\n        contractURI_ = _contractURI;\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Whitelist OpenSea proxy contract for easy trading.\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        if (address(proxyRegistry.proxies(owner)) == operator) {\n            return true;\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/DefaultIzanaNFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./Store.sol\";\n\n/**\n * @title ERC721Tradable\n * ERC721Tradable - ERC721 contract that whitelists a trading address, and has minting functionality.\n */\ncontract DefaultIzanaNFT721 is ERC721Upgradeable, OwnableUpgradeable {\n    using SafeMath for uint256;\n\n    address public exchangeAddress;\n    address public proxyRegistryAddress;\n    string private contractURI_;\n    string private _extendedTokenURI;\n\n    mapping(uint256 => string) private _eTokenURIs;\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        string memory _tokenURI,\n        string memory _contractURI,\n        address _proxyRegistryAddress,\n        address _exchangeAddress\n    ) external initializer {\n        __Ownable_init();\n        __ERC721_init(_name, _symbol);\n        proxyRegistryAddress = _proxyRegistryAddress;\n        _extendedTokenURI = _tokenURI;\n        exchangeAddress = _exchangeAddress;\n        contractURI_ = _contractURI;\n\n        transferOwnership(tx.origin);\n    }\n\n    function contractURI() external view returns (string memory) {\n        return contractURI_;\n    }\n\n    function mintTo(\n        address _to,\n        uint256 _tokenId,\n        string memory _metadataURI\n    ) public returns (uint256) {\n        _mint(_to, _tokenId);\n        _eTokenURIs[_tokenId] = _metadataURI;\n        return _tokenId;\n    }\n\n    function mintAndTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        string memory _metadataURI\n    ) external returns (uint256) {\n        if (_exists(_tokenId)) {\n            address owner = ownerOf(_tokenId);\n            require(\n                owner == _from,\n                \"ERC721Tradable::Token ID not belong to user!\"\n            );\n            require(\n                isApprovedForAll(owner, _msgSender()),\n                \"ERC721Tradable::sender is not approved!\"\n            );\n            _transfer(_from, _to, _tokenId);\n        } else {\n            _mint(_to, _tokenId);\n            _eTokenURIs[_tokenId] = _metadataURI;\n        }\n\n        return _tokenId;\n    }\n\n    function singleTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external returns (uint256) {\n        if (_exists(_tokenId)) {\n            address owner = ownerOf(_tokenId);\n            require(\n                owner == _from,\n                \"ERC721Tradable::Token ID not belong to user!\"\n            );\n            require(\n                isApprovedForAll(owner, _msgSender()),\n                \"ERC721Tradable::sender is not approved!\"\n            );\n            _transfer(_from, _to, _tokenId);\n        }\n\n        return _tokenId;\n    }\n\n    function baseTokenURI() public view virtual returns (string memory) {\n        return _extendedTokenURI;\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        string memory _tokenURI = _eTokenURIs[_tokenId];\n        string memory base = baseTokenURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, Strings.toString(_tokenId)));\n    }\n\n    function modifyExtendedURI(string memory extendedTokenURI_)\n        external\n        onlyOwner\n    {\n        _extendedTokenURI = extendedTokenURI_;\n    }\n\n    function modifyContractURI(string memory _contractURI)\n        external\n        onlyOwner\n    {\n        contractURI_ = _contractURI;\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Whitelist OpenSea proxy contract for easy trading.\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        if (address(proxyRegistry.proxies(owner)) == operator) {\n            return true;\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/exchange/Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/ArrayUtils.sol\";\nimport \"../libraries/SaleKindInterface.sol\";\nimport \"../libraries/ReentrancyGuarded.sol\";\nimport \"../registry/ProxyRegistry.sol\";\nimport \"../modules/IzanaNFTTransferProxy.sol\";\nimport \"../registry/AuthenticatedProxy.sol\";\nimport \"./ExchangeMain.sol\";\n\ncontract Exchange is ExchangeMain {\n    /**\n     * @dev Call calculateFinalPrice - library function exposed for testing.\n     */\n    function calculateFinalPrice(\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        uint256 basePrice,\n        uint256 extra,\n        uint256 listingTime,\n        uint256 expirationTime,\n        uint256 amount\n    ) public view returns (uint256) {\n        return\n            SaleKindInterface.calculateFinalPrice(\n                side,\n                saleKind,\n                basePrice,\n                extra,\n                listingTime,\n                expirationTime,\n                amount\n            );\n    }\n\n    /**\n     * @dev Call hashOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function hashOrder_(\n        address[7] memory addrs,\n        uint256[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata\n    ) public pure returns (bytes32) {\n        return\n            hashOrder(\n                Order(\n                    addrs[0],\n                    addrs[1],\n                    addrs[2],\n                    uints[0],\n                    uints[1],\n                    addrs[3],\n                    feeMethod,\n                    side,\n                    saleKind,\n                    addrs[4],\n                    howToCall,\n                    callData,\n                    replacementPattern,\n                    addrs[5],\n                    staticExtradata,\n                    addrs[6],\n                    uints[2],\n                    uints[3],\n                    uints[4],\n                    uints[5],\n                    uints[6]\n                )\n            );\n    }\n\n    /**\n     * @dev Call hashToSign - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function hashToSign_(\n        address[7] memory addrs,\n        uint256[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata\n    ) public pure returns (bytes32) {\n        return\n            hashToSign(\n                Order(\n                    addrs[0],\n                    addrs[1],\n                    addrs[2],\n                    uints[0],\n                    uints[1],\n                    addrs[3],\n                    feeMethod,\n                    side,\n                    saleKind,\n                    addrs[4],\n                    howToCall,\n                    callData,\n                    replacementPattern,\n                    addrs[5],\n                    staticExtradata,\n                    addrs[6],\n                    uints[2],\n                    uints[3],\n                    uints[4],\n                    uints[5],\n                    uints[6]\n                )\n            );\n    }\n\n    /**\n     * @dev Call validateOrderParameters - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function validateOrderParameters_(\n        address[7] memory addrs,\n        uint256[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata\n    ) public view returns (bool) {\n        Order memory order = Order(\n            addrs[0],\n            addrs[1],\n            addrs[2],\n            uints[0],\n            uints[1],\n            addrs[3],\n            feeMethod,\n            side,\n            saleKind,\n            addrs[4],\n            howToCall,\n            callData,\n            replacementPattern,\n            addrs[5],\n            staticExtradata,\n            addrs[6],\n            uints[2],\n            uints[3],\n            uints[4],\n            uints[5],\n            uints[6]\n        );\n        return validateOrderParameters(order);\n    }\n\n    /**\n     * @dev Call validateOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function validateOrder_(\n        address[7] memory addrs,\n        uint256[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public view returns (bool) {\n        Order memory order = Order(\n            addrs[0],\n            addrs[1],\n            addrs[2],\n            uints[0],\n            uints[1],\n            addrs[3],\n            feeMethod,\n            side,\n            saleKind,\n            addrs[4],\n            howToCall,\n            callData,\n            replacementPattern,\n            addrs[5],\n            staticExtradata,\n            addrs[6],\n            uints[2],\n            uints[3],\n            uints[4],\n            uints[5],\n            uints[6]\n        );\n        return validateOrder(hashToSign(order), order, Sig(v, r, s));\n    }\n\n    /**\n     * @dev Call approveOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function approveOrder_(\n        address[7] memory addrs,\n        uint256[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata,\n        bool orderbookInclusionDesired\n    ) public {\n        Order memory order = Order(\n            addrs[0],\n            addrs[1],\n            addrs[2],\n            uints[0],\n            uints[1],\n            addrs[3],\n            feeMethod,\n            side,\n            saleKind,\n            addrs[4],\n            howToCall,\n            callData,\n            replacementPattern,\n            addrs[5],\n            staticExtradata,\n            addrs[6],\n            uints[2],\n            uints[3],\n            uints[4],\n            uints[5],\n            uints[6]\n        );\n        return approveOrder(order, orderbookInclusionDesired);\n    }\n\n    /**\n     * @dev Call cancelOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function cancelOrder_(\n        address[7] memory addrs,\n        uint256[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        return\n            cancelOrder(\n                Order(\n                    addrs[0],\n                    addrs[1],\n                    addrs[2],\n                    uints[0],\n                    uints[1],\n                    addrs[3],\n                    feeMethod,\n                    side,\n                    saleKind,\n                    addrs[4],\n                    howToCall,\n                    callData,\n                    replacementPattern,\n                    addrs[5],\n                    staticExtradata,\n                    addrs[6],\n                    uints[2],\n                    uints[3],\n                    uints[4],\n                    uints[5],\n                    uints[6]\n                ),\n                Sig(v, r, s)\n            );\n    }\n\n    /**\n     * @dev Call calculateCurrentPrice - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function calculateCurrentPrice_(\n        address[7] memory addrs,\n        uint256[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata,\n        uint256 amount\n    ) public view returns (uint256) {\n        return\n            calculateCurrentPrice(\n                Order(\n                    addrs[0],\n                    addrs[1],\n                    addrs[2],\n                    uints[0],\n                    uints[1],\n                    addrs[3],\n                    feeMethod,\n                    side,\n                    saleKind,\n                    addrs[4],\n                    howToCall,\n                    callData,\n                    replacementPattern,\n                    addrs[5],\n                    staticExtradata,\n                    addrs[6],\n                    uints[2],\n                    uints[3],\n                    uints[4],\n                    uints[5],\n                    uints[6]\n                ),\n                amount\n            );\n    }\n\n    /**\n     * @dev Call ordersCanMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function ordersCanMatch_(\n        address[14] memory addrs,\n        uint256[14] memory uints,\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\n        bytes memory calldataBuy,\n        bytes memory calldataSell,\n        bytes memory replacementPatternBuy,\n        bytes memory replacementPatternSell,\n        bytes memory staticExtradataBuy,\n        bytes memory staticExtradataSell\n    ) public view returns (bool) {\n        Order memory buy = Order(\n            addrs[0],\n            addrs[1],\n            addrs[2],\n            uints[0],\n            uints[1],\n            addrs[3],\n            FeeMethod(feeMethodsSidesKindsHowToCalls[0]),\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]),\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]),\n            addrs[4],\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]),\n            calldataBuy,\n            replacementPatternBuy,\n            addrs[5],\n            staticExtradataBuy,\n            addrs[6],\n            uints[2],\n            uints[3],\n            uints[4],\n            uints[5],\n            uints[6]\n        );\n        Order memory sell = Order(\n            addrs[7],\n            addrs[8],\n            addrs[9],\n            uints[7],\n            uints[8],\n            addrs[10],\n            FeeMethod(feeMethodsSidesKindsHowToCalls[4]),\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]),\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]),\n            addrs[11],\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]),\n            calldataSell,\n            replacementPatternSell,\n            addrs[12],\n            staticExtradataSell,\n            addrs[13],\n            uints[9],\n            uints[10],\n            uints[11],\n            uints[12],\n            uints[13]\n        );\n        return ordersCanMatch(buy, sell);\n    }\n\n    // /**\n    //  * @dev Return whether or not two orders' calldata specifications can match\n    //  * @param buyCalldata Buy-side order calldata\n    //  * @param buyReplacementPattern Buy-side order calldata replacement mask\n    //  * @param sellCalldata Sell-side order calldata\n    //  * @param sellReplacementPattern Sell-side order calldata replacement mask\n    //  * @return Whether the orders' calldata can be matched\n    //  */\n    // function orderCalldataCanMatch(\n    //     bytes memory buyCalldata,\n    //     bytes memory buyReplacementPattern,\n    //     bytes memory sellCalldata,\n    //     bytes memory sellReplacementPattern\n    // ) public pure returns (bool) {\n    //     if (buyReplacementPattern.length > 0) {\n    //         ArrayUtils.guardedArrayReplace(\n    //             buyCalldata,\n    //             sellCalldata,\n    //             buyReplacementPattern\n    //         );\n    //     }\n    //     if (sellReplacementPattern.length > 0) {\n    //         ArrayUtils.guardedArrayReplace(\n    //             sellCalldata,\n    //             buyCalldata,\n    //             sellReplacementPattern\n    //         );\n    //     }\n    //     return ArrayUtils.arrayEq(buyCalldata, sellCalldata);\n    // }\n\n    /**\n     * @dev Call calculateMatchPrice - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function calculateMatchPrice_(\n        address[14] memory addrs,\n        uint256[14] memory uints,\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\n        bytes memory calldataBuy,\n        bytes memory calldataSell,\n        bytes memory replacementPatternBuy,\n        bytes memory replacementPatternSell,\n        bytes memory staticExtradataBuy,\n        bytes memory staticExtradataSell,\n        uint256 amount\n    ) public view returns (uint256) {\n        Order memory buy = Order(\n            addrs[0],\n            addrs[1],\n            addrs[2],\n            uints[0],\n            uints[1],\n            addrs[3],\n            FeeMethod(feeMethodsSidesKindsHowToCalls[0]),\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]),\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]),\n            addrs[4],\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]),\n            calldataBuy,\n            replacementPatternBuy,\n            addrs[5],\n            staticExtradataBuy,\n            addrs[6],\n            uints[2],\n            uints[3],\n            uints[4],\n            uints[5],\n            uints[6]\n        );\n        Order memory sell = Order(\n            addrs[7],\n            addrs[8],\n            addrs[9],\n            uints[7],\n            uints[8],\n            addrs[10],\n            FeeMethod(feeMethodsSidesKindsHowToCalls[4]),\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]),\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]),\n            addrs[11],\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]),\n            calldataSell,\n            replacementPatternSell,\n            addrs[12],\n            staticExtradataSell,\n            addrs[13],\n            uints[9],\n            uints[10],\n            uints[11],\n            uints[12],\n            uints[13]\n        );\n        return calculateMatchPrice(buy, sell, amount);\n    }\n\n    /**\n     * @dev Call atomicMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\n     */\n    function atomicMatch_(\n        address[14] memory addrs,\n        uint256[14] memory uints,\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\n        bytes memory calldataBuy,\n        bytes memory calldataSell,\n        bytes memory replacementPatternBuy,\n        bytes memory replacementPatternSell,\n        bytes memory staticExtradataBuy,\n        bytes memory staticExtradataSell,\n        uint8[2] memory vs,\n        bytes32[5] memory rssMetadata\n    ) public payable {\n        return\n            atomicMatch(\n                Order(\n                    addrs[0],\n                    addrs[1],\n                    addrs[2],\n                    uints[0],\n                    uints[1],\n                    addrs[3],\n                    FeeMethod(feeMethodsSidesKindsHowToCalls[0]),\n                    SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]),\n                    SaleKindInterface.SaleKind(\n                        feeMethodsSidesKindsHowToCalls[2]\n                    ),\n                    addrs[4],\n                    AuthenticatedProxy.HowToCall(\n                        feeMethodsSidesKindsHowToCalls[3]\n                    ),\n                    calldataBuy,\n                    replacementPatternBuy,\n                    addrs[5],\n                    staticExtradataBuy,\n                    addrs[6],\n                    uints[2],\n                    uints[3],\n                    uints[4],\n                    uints[5],\n                    uints[6]\n                ),\n                Sig(vs[0], rssMetadata[0], rssMetadata[1]),\n                Order(\n                    addrs[7],\n                    addrs[8],\n                    addrs[9],\n                    uints[7],\n                    uints[8],\n                    addrs[10],\n                    FeeMethod(feeMethodsSidesKindsHowToCalls[4]),\n                    SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]),\n                    SaleKindInterface.SaleKind(\n                        feeMethodsSidesKindsHowToCalls[6]\n                    ),\n                    addrs[11],\n                    AuthenticatedProxy.HowToCall(\n                        feeMethodsSidesKindsHowToCalls[7]\n                    ),\n                    calldataSell,\n                    replacementPatternSell,\n                    addrs[12],\n                    staticExtradataSell,\n                    addrs[13],\n                    uints[9],\n                    uints[10],\n                    uints[11],\n                    uints[12],\n                    uints[13]\n                ),\n                Sig(vs[1], rssMetadata[2], rssMetadata[3]),\n                rssMetadata[4]\n            );\n    }\n}\n"
    },
    "contracts/exchange/ExchangeMain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/ArrayUtils.sol\";\nimport \"../libraries/SaleKindInterface.sol\";\nimport \"../libraries/ReentrancyGuarded.sol\";\nimport \"../registry/ProxyRegistry.sol\";\nimport \"../modules/ERC20.sol\";\nimport \"../modules/IzanaNFTTransferProxy.sol\";\nimport \"../registry/AuthenticatedProxy.sol\";\nimport \"../interfaces/IIzanaNFTStore.sol\";\nimport \"../royalties/interfaces/IRoyaltyFeeRegistry.sol\";\n\ncontract ExchangeMain is ReentrancyGuarded, Ownable {\n    /* The token used to pay exchange fees. */\n    bytes4 constant ERC1155_SIGNATURE = 0x127217d6;\n    /* User registry. */\n    ProxyRegistry public registry;\n\n    /* Token transfer proxy. */\n    IzanaNFTTransferProxy public tokenTransferProxy;\n\n    /* Royalties */\n    IRoyaltyFeeRegistry public royaltyFeeRegistry;\n\n    struct SellRemaining {\n        bool tracking;\n        uint256 left;\n    }\n\n    mapping(bytes32 => SellRemaining) public sellOrderAmountRemaining;\n\n    /* Cancelled / finalized orders, by hash. */\n    mapping(bytes32 => bool) public cancelledOrFinalized;\n\n    /* Orders verified by on-chain approval (alternative to ECDSA signatures so that smart contracts can place orders directly). */\n    mapping(bytes32 => bool) public approvedOrders;\n\n    /* Fee method: protocol fee or split fee. */\n    enum FeeMethod {\n        ProtocolFee,\n        SplitFee\n    }\n\n    /* Inverse basis point. */\n    uint256 public constant INVERSE_BASIS_POINT = 10000;\n\n    /* An ECDSA signature. */\n    struct Sig {\n        /* v parameter */\n        uint8 v;\n        /* r parameter */\n        bytes32 r;\n        /* s parameter */\n        bytes32 s;\n    }\n\n    /* An order on the exchange. */\n    struct Order {\n        /* Exchange address, intended as a versioning mechanism. */\n        address exchange;\n        /* Order maker address. */\n        address maker;\n        /* Order taker address, if specified. */\n        address taker;\n        /* Maker relayer fee of the order, unused for taker order. */\n        uint256 makerRelayerFee;\n        /* Taker relayer fee of the order, or maximum taker fee for a taker order. */\n        uint256 takerRelayerFee;\n        // /* Maker protocol fee of the order, unused for taker order. */\n        // uint makerProtocolFee;\n        // /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\n        // uint takerProtocolFee;\n        /* Order fee recipient or zero address for taker order. */\n        address feeRecipient;\n        /* Fee method (protocol token or split fee). */\n        FeeMethod feeMethod;\n        /* Side (buy/sell). */\n        SaleKindInterface.Side side;\n        /* Kind of sale. */\n        SaleKindInterface.SaleKind saleKind;\n        /* Target. */\n        address target;\n        /* HowToCall. */\n        AuthenticatedProxy.HowToCall howToCall;\n        /* Calldata. */\n        bytes callData;\n        bytes replacementPattern;\n        /* Calldata replacement pattern, or an empty byte array for no replacement. */\n        // bytes replacementPattern;\n        // /* Static call target, zero-address for no static call. */\n        address staticTarget;\n        /* Static call extra data. */\n        bytes staticExtradata;\n        /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\n        address paymentToken;\n        /* Base price of the order (in paymentTokens). */\n        uint256 basePrice;\n        /* Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. */\n        uint256 extra;\n        /* Listing timestamp. */\n        uint256 listingTime;\n        /* Expiration timestamp - 0 for no expiry. */\n        uint256 expirationTime;\n        /* Order salt, used to prevent duplicate hashes. */\n        uint256 salt;\n    }\n\n    event OrderApprovedPartOne(\n        bytes32 indexed hash,\n        address exchange,\n        address indexed maker,\n        address taker,\n        uint256 makerRelayerFee,\n        uint256 takerRelayerFee,\n        address indexed feeRecipient,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        address target\n    );\n    event OrderApprovedPartTwo(\n        bytes32 indexed hash,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes callData,\n        address staticTarget,\n        bytes staticExtradata,\n        address paymentToken,\n        uint256 basePrice,\n        uint256 extra,\n        uint256 listingTime,\n        uint256 expirationTime,\n        uint256 salt,\n        bool orderbookInclusionDesired\n    );\n    // event OrderApprovedPartOne    (bytes32 indexed hash, address exchange, address indexed maker, address taker, uint makerRelayerFee, uint takerRelayerFee, uint makerProtocolFee, uint takerProtocolFee, address indexed feeRecipient, FeeMethod feeMethod, SaleKindInterface.Side side, SaleKindInterface.SaleKind saleKind, address target);\n    // event OrderApprovedPartTwo    (bytes32 indexed hash, AuthenticatedProxy.HowToCall howToCall, bytes callData, bytes replacementPattern, address staticTarget, bytes staticExtradata, address paymentToken, uint basePrice, uint extra, uint listingTime, uint expirationTime, uint salt, bool orderbookInclusionDesired);\n    event OrderCancelled(bytes32 indexed hash);\n    event OrdersMatched(\n        bytes32 buyHash,\n        bytes32 sellHash,\n        address maker,\n        address taker,\n        uint256 price,\n        uint256 tokenId,\n        address collection,\n        uint256 tokenAmount,\n        bytes32 indexed metadata\n    );\n\n    /**\n     * @dev Transfer tokens\n     * @param token Token to transfer\n     * @param from Address to charge fees\n     * @param to Address to receive fees\n     * @param amount Amount of protocol tokens to charge\n     */\n    function transferTokens(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        if (amount > 0) {\n            tokenTransferProxy.transferFrom(token, from, to, amount);\n        }\n    }\n\n    /**\n     * @dev Charge a fee in protocol tokens\n     * @param from Address to charge fees\n     * @param to Address to receive fees\n     * @param amount Amount of protocol tokens to charge\n     */\n    function chargeProtocolFee(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        transferTokens(token, from, to, amount);\n    }\n\n    /**\n     * Calculate size of an order struct when tightly packed\n     *\n     * @param order Order to calculate size of\n     * @return Size in bytes\n     */\n    function sizeOf(Order memory order) internal pure returns (uint256) {\n        return ((0x14 * 7) +\n            (0x20 * 9) +\n            4 +\n            order.callData.length +\n            order.replacementPattern.length +\n            order.staticExtradata.length);\n        // return ((0x14 * 7) + (0x20 * 9) + 4 + order.callData.length + order.replacementPattern.length + order.staticExtradata.length);\n    }\n\n    /**\n     * @dev Hash an order, returning the canonical order hash, without the message prefix\n     * @param order Order to hash\n     */\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 hash)\n    {\n        /* Unfortunately abi.encodePacked doesn't work here, stack size constraints. */\n        uint256 size = sizeOf(order);\n        bytes memory array = new bytes(size);\n        uint256 index;\n        assembly {\n            index := add(array, 0x20)\n        }\n        index = ArrayUtils.unsafeWriteAddress(index, order.exchange);\n        index = ArrayUtils.unsafeWriteAddress(index, order.maker);\n        index = ArrayUtils.unsafeWriteAddress(index, order.taker);\n        index = ArrayUtils.unsafeWriteUint(index, order.makerRelayerFee);\n        index = ArrayUtils.unsafeWriteUint(index, order.takerRelayerFee);\n        // index = ArrayUtils.unsafeWriteUint(index, order.makerProtocolFee);\n        // index = ArrayUtils.unsafeWriteUint(index, order.takerProtocolFee);\n        index = ArrayUtils.unsafeWriteAddress(index, order.feeRecipient);\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.feeMethod));\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.side));\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.saleKind));\n        index = ArrayUtils.unsafeWriteAddress(index, order.target);\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.howToCall));\n        index = ArrayUtils.unsafeWriteBytes(index, order.callData);\n        index = ArrayUtils.unsafeWriteBytes(index, order.replacementPattern);\n        index = ArrayUtils.unsafeWriteAddress(index, order.staticTarget);\n        index = ArrayUtils.unsafeWriteBytes(index, order.staticExtradata);\n        index = ArrayUtils.unsafeWriteAddress(index, order.paymentToken);\n        index = ArrayUtils.unsafeWriteUint(index, order.basePrice);\n        index = ArrayUtils.unsafeWriteUint(index, order.extra);\n        index = ArrayUtils.unsafeWriteUint(index, order.listingTime);\n        index = ArrayUtils.unsafeWriteUint(index, order.expirationTime);\n        index = ArrayUtils.unsafeWriteUint(index, order.salt);\n        assembly {\n            hash := keccak256(add(array, 0x20), size)\n        }\n        return hash;\n    }\n\n    /**\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\n     * @param order Order to hash\n     * @return Hash of message prefix and order hash per Ethereum format\n     */\n    function hashToSign(Order memory order) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hashOrder(order)\n                )\n            );\n    }\n\n    /**\n     * @dev Assert an order is valid and return its hash\n     * @param order Order to validate\n     * @param sig ECDSA signature\n     */\n    function requireValidOrder(Order memory order, Sig memory sig)\n        internal\n        view\n        returns (bytes32)\n    {\n        bytes32 hash = hashToSign(order);\n        require(validateOrder(hash, order, sig), \"INVALID_ORDER_HASH\");\n        return hash;\n    }\n\n    /**\n     * @dev Validate order parameters (does *not* check signature validity)\n     * @param order Order to validate\n     */\n    function validateOrderParameters(Order memory order)\n        internal\n        view\n        returns (bool)\n    {\n        /* Order must be targeted at this protocol version (this Exchange contract). */\n        if (order.exchange != address(this)) {\n            return false;\n        }\n\n        /* Order must possess valid sale kind parameter combination. */\n        if (\n            !SaleKindInterface.validateParameters(\n                order.saleKind,\n                order.expirationTime\n            )\n        ) {\n            return false;\n        }\n\n        // /* If using the split fee method, order must have sufficient protocol fees. */\n        // if (order.feeMethod == FeeMethod.SplitFee && (order.makerProtocolFee < minimumMakerProtocolFee || order.takerProtocolFee < minimumTakerProtocolFee)) {\n        //     return false;\n        // }\n\n        return true;\n    }\n\n    /**\n     * @dev Validate a provided previously approved / signed order, hash, and signature.\n     * @param hash Order hash (already calculated, passed to avoid recalculation)\n     * @param order Order to validate\n     * @param sig ECDSA signature\n     */\n    function validateOrder(\n        bytes32 hash,\n        Order memory order,\n        Sig memory sig\n    ) internal view returns (bool) {\n        /* Not done in an if-conditional to prevent unnecessary ecrecover evaluation, which seems to happen even though it should short-circuit. */\n\n        /* Order must have valid parameters. */\n        if (!validateOrderParameters(order)) {\n            return false;\n        }\n\n        /* Order must have not been canceled or already filled. */\n        if (cancelledOrFinalized[hash]) {\n            return false;\n        }\n\n        /* Order authentication. Order must be either:\n        /* (a) previously approved */\n        if (approvedOrders[hash]) {\n            return true;\n        }\n\n        /* or (b) ECDSA-signed by maker. */\n        if (ecrecover(hash, sig.v, sig.r, sig.s) == order.maker) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Approve an order and optionally mark it for orderbook inclusion. Must be called by the maker of the order\n     * @param order Order to approve\n     * @param orderbookInclusionDesired Whether orderbook providers should include the order in their orderbooks\n     */\n    function approveOrder(Order memory order, bool orderbookInclusionDesired)\n        internal\n    {\n        /* CHECKS */\n\n        /* Assert sender is authorized to approve order. */\n        require(msg.sender == order.maker);\n\n        /* Calculate order hash. */\n        bytes32 hash = hashToSign(order);\n\n        /* Assert order has not already been approved. */\n        require(!approvedOrders[hash]);\n\n        /* EFFECTS */\n\n        /* Mark order as approved. */\n        approvedOrders[hash] = true;\n\n        /* Log approval event. Must be split in two due to Solidity stack size limitations. */\n        {\n            emit OrderApprovedPartOne(\n                hash,\n                order.exchange,\n                order.maker,\n                order.taker,\n                order.makerRelayerFee,\n                order.takerRelayerFee,\n                order.feeRecipient,\n                order.feeMethod,\n                order.side,\n                order.saleKind,\n                order.target\n            );\n        }\n        {\n            emit OrderApprovedPartTwo(\n                hash,\n                order.howToCall,\n                order.callData,\n                order.staticTarget,\n                order.staticExtradata,\n                order.paymentToken,\n                order.basePrice,\n                order.extra,\n                order.listingTime,\n                order.expirationTime,\n                order.salt,\n                orderbookInclusionDesired\n            );\n        }\n    }\n\n    /**\n     * @dev Cancel an order, preventing it from being matched. Must be called by the maker of the order\n     * @param order Order to cancel\n     * @param sig ECDSA signature\n     */\n    function cancelOrder(Order memory order, Sig memory sig) internal {\n        /* CHECKS */\n        bytes32 _hash = hashOrder(order);\n        /* Calculate order hash. */\n        bytes32 hash = requireValidOrder(order, sig);\n        /* Assert sender is authorized to cancel order. */\n        require(msg.sender == order.maker);\n\n        /* Mark order as cancelled, preventing it from being matched. */\n        cancelledOrFinalized[hash] = true;\n\n        /* Log cancel event. */\n        emit OrderCancelled(_hash);\n    }\n\n    /**\n     * @dev Calculate the current price of an order (convenience function)\n     * @param order Order to calculate the price of\n     * @return The current price of the order\n     */\n    function calculateCurrentPrice(Order memory order, uint256 amount)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            SaleKindInterface.calculateFinalPrice(\n                order.side,\n                order.saleKind,\n                order.basePrice,\n                order.extra,\n                order.listingTime,\n                order.expirationTime,\n                amount\n            );\n    }\n\n    /**\n     * @dev Calculate the price two orders would match at, if in fact they would match (otherwise fail)\n     * @param buy Buy-side order\n     * @param sell Sell-side order\n     * @return Match price\n     */\n    function calculateMatchPrice(\n        Order memory buy,\n        Order memory sell,\n        uint256 amount\n    ) internal view returns (uint256) {\n        /* Calculate sell price. */\n        uint256 sellPrice = SaleKindInterface.calculateFinalPrice(\n            sell.side,\n            sell.saleKind,\n            sell.basePrice,\n            sell.extra,\n            sell.listingTime,\n            sell.expirationTime,\n            amount\n        );\n\n        /* Calculate buy price. */\n        uint256 buyPrice = SaleKindInterface.calculateFinalPrice(\n            buy.side,\n            buy.saleKind,\n            buy.basePrice,\n            buy.extra,\n            buy.listingTime,\n            buy.expirationTime,\n            amount\n        );\n\n        /* Require price cross. */\n        require(buyPrice >= sellPrice);\n\n        /* Maker/taker priority. */\n        return sell.feeRecipient != address(0) ? sellPrice : buyPrice;\n    }\n\n    /**\n     * @dev Execute all ERC20 token / Ether transfers associated with an order match (fees and buyer => seller transfer)\n     * @param buy Buy-side order\n     * @param sell Sell-side order\n     */\n    function executeFundsTransfer(\n        Order memory buy,\n        Order memory sell,\n        uint256 amount,\n        uint256 tokenId\n    ) internal returns (uint256) {\n        /* Only payable in the special case of unwrapped Ether. */\n        if (sell.paymentToken != address(0)) {\n            require(msg.value == 0);\n        }\n\n        /* Calculate match price. */\n        uint256 price = calculateMatchPrice(buy, sell, amount);\n        /* If paying using a token (not Ether), transfer tokens. This is done prior to fee payments to that a seller will have tokens before being charged fees. */\n        if (price > 0 && sell.paymentToken != address(0)) {\n            transferTokens(sell.paymentToken, buy.maker, sell.maker, price);\n        }\n        /* Amount that will be received by seller (for Ether). */\n        uint256 receiveAmount = price;\n\n        /* Amount that must be sent by buyer (for Ether). */\n        uint256 requiredAmount = price;\n        /* Determine maker/taker and charge fees accordingly. */\n        if (sell.feeRecipient != address(0)) {\n            /* Sell-side order is maker. */\n\n            /* Assert taker fee is less than or equal to maximum fee specified by buyer. */\n            require(sell.takerRelayerFee <= buy.takerRelayerFee);\n\n            if (sell.feeMethod == FeeMethod.SplitFee) {\n                // /* Assert taker fee is less than or equal to maximum fee specified by buyer. */\n                // require(sell.takerProtocolFee <= buy.takerProtocolFee);\n\n                /* Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker. */\n\n                if (sell.makerRelayerFee > 0) {\n                    uint256 makerRelayerFee = SafeMath.div(\n                        SafeMath.mul(sell.makerRelayerFee, price),\n                        INVERSE_BASIS_POINT\n                    );\n                    if (sell.paymentToken == address(0)) {\n                        receiveAmount = SafeMath.sub(\n                            receiveAmount,\n                            makerRelayerFee\n                        );\n                        payable(sell.feeRecipient).transfer(makerRelayerFee);\n                    } else {\n                        transferTokens(\n                            sell.paymentToken,\n                            sell.maker,\n                            sell.feeRecipient,\n                            makerRelayerFee\n                        );\n                    }\n                }\n\n                if (sell.takerRelayerFee > 0) {\n                    uint256 takerRelayerFee = SafeMath.div(\n                        SafeMath.mul(sell.takerRelayerFee, price),\n                        INVERSE_BASIS_POINT\n                    );\n                    if (sell.paymentToken == address(0)) {\n                        requiredAmount = SafeMath.add(\n                            requiredAmount,\n                            takerRelayerFee\n                        );\n                        payable(sell.feeRecipient).transfer(takerRelayerFee);\n                    } else {\n                        transferTokens(\n                            sell.paymentToken,\n                            buy.maker,\n                            sell.feeRecipient,\n                            takerRelayerFee\n                        );\n                    }\n                }\n            } else {\n                /* Charge maker fee to seller. */\n                chargeProtocolFee(\n                    sell.paymentToken,\n                    sell.maker,\n                    sell.feeRecipient,\n                    sell.makerRelayerFee\n                );\n\n                /* Charge taker fee to buyer. */\n                chargeProtocolFee(\n                    sell.paymentToken,\n                    buy.maker,\n                    sell.feeRecipient,\n                    sell.takerRelayerFee\n                );\n            }\n        } else {\n            /* Buy-side order is maker. */\n\n            /* Assert taker fee is less than or equal to maximum fee specified by seller. */\n            require(buy.takerRelayerFee <= sell.takerRelayerFee);\n\n            if (sell.feeMethod == FeeMethod.SplitFee) {\n                /* The Exchange does not escrow Ether, so direct Ether can only be used to with sell-side maker / buy-side taker orders. */\n                require(sell.paymentToken != address(0));\n\n                // /* Assert taker fee is less than or equal to maximum fee specified by seller. */\n                // require(buy.takerProtocolFee <= sell.takerProtocolFee);\n\n                if (buy.makerRelayerFee > 0) {\n                    uint256 makerRelayerFee = SafeMath.div(\n                        SafeMath.mul(buy.makerRelayerFee, price),\n                        INVERSE_BASIS_POINT\n                    );\n                    transferTokens(\n                        sell.paymentToken,\n                        buy.maker,\n                        buy.feeRecipient,\n                        makerRelayerFee\n                    );\n                }\n\n                if (buy.takerRelayerFee > 0) {\n                    uint256 takerRelayerFee = SafeMath.div(\n                        SafeMath.mul(buy.takerRelayerFee, price),\n                        INVERSE_BASIS_POINT\n                    );\n                    transferTokens(\n                        sell.paymentToken,\n                        sell.maker,\n                        buy.feeRecipient,\n                        takerRelayerFee\n                    );\n                }\n            } else {\n                /* Charge maker fee to buyer. */\n                chargeProtocolFee(\n                    sell.paymentToken,\n                    buy.maker,\n                    buy.feeRecipient,\n                    buy.makerRelayerFee\n                );\n\n                /* Charge taker fee to seller. */\n                chargeProtocolFee(\n                    sell.paymentToken,\n                    sell.maker,\n                    buy.feeRecipient,\n                    buy.takerRelayerFee\n                );\n            }\n        }\n\n        {\n            (\n                address royaltyFeeRecipient,\n                uint256 royaltyFeeAmount\n            ) = royaltyFeeRegistry.royaltyInfo(sell.target, price, tokenId);\n\n            // Check if there is a royalty fee and that it is different to 0\n            if (\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\n            ) {\n                receiveAmount = SafeMath.sub(receiveAmount, royaltyFeeAmount);\n\n                if (sell.paymentToken == address(0)) {\n                    payable(royaltyFeeRecipient).transfer(royaltyFeeAmount);\n                }\n\n                if (\n                    sell.paymentToken != address(0) &&\n                    sell.maker != royaltyFeeRecipient\n                ) {\n                    transferTokens(\n                        sell.paymentToken,\n                        sell.maker,\n                        royaltyFeeRecipient,\n                        royaltyFeeAmount\n                    );\n                }\n            }\n        }\n\n        if (sell.paymentToken == address(0)) {\n            /* Special-case Ether, order must be matched by buyer. */\n            require(msg.value >= requiredAmount);\n            payable(sell.maker).transfer(receiveAmount);\n            /* Allow overshoot for variable-price auctions, refund difference. */\n            uint256 diff = SafeMath.sub(msg.value, requiredAmount);\n            if (diff > 0) {\n                payable(buy.maker).transfer(diff);\n            }\n        }\n\n        /* This contract should never hold Ether, however, we cannot assert this, since it is impossible to prevent anyone from sending Ether e.g. with selfdestruct. */\n\n        return price;\n    }\n\n    /**\n     * @dev Return whether or not two orders can be matched with each other by basic parameters (does not check order signatures / calldata or perform static calls)\n     * @param buy Buy-side order\n     * @param sell Sell-side order\n     * @return Whether or not the two orders can be matched\n     */\n    function ordersCanMatch(Order memory buy, Order memory sell)\n        internal\n        view\n        returns (bool)\n    {\n        return (/* Must be opposite-side. */\n        (buy.side == SaleKindInterface.Side.Buy &&\n            sell.side == SaleKindInterface.Side.Sell) &&\n            /* Must use same fee method. */\n            (buy.feeMethod == sell.feeMethod) &&\n            /* Must use same payment token. */\n            (buy.paymentToken == sell.paymentToken) &&\n            /* Must match maker/taker addresses. */\n            (sell.taker == address(0) || sell.taker == buy.maker) &&\n            (buy.taker == address(0) || buy.taker == sell.maker) &&\n            /* One must be maker and the other must be taker (no bool XOR in Solidity). */\n            ((sell.feeRecipient == address(0) &&\n                buy.feeRecipient != address(0)) ||\n                (sell.feeRecipient != address(0) &&\n                    buy.feeRecipient == address(0))) &&\n            /* Must match target. */\n            (buy.target == sell.target) &&\n            /* Must match howToCall. */\n            (buy.howToCall == sell.howToCall) &&\n            /* Buy-side order must be settleable. */\n            SaleKindInterface.canSettleOrder(\n                buy.listingTime,\n                buy.expirationTime\n            ) &&\n            /* Sell-side order must be settleable. */\n            SaleKindInterface.canSettleOrder(\n                sell.listingTime,\n                sell.expirationTime\n            ));\n    }\n\n    function _validatePartialSellingAmount(\n        Order memory buy,\n        Order memory sell,\n        bool isMint\n    ) internal returns (bool, uint256) {\n        uint256 buyAmount;\n        uint256 sellAmount;\n        uint256 tokenId;\n\n        bytes32 hash = hashToSign(sell);\n        SellRemaining storage sellAmountRemaining = sellOrderAmountRemaining[\n            hash\n        ];\n\n        uint8 index = isMint ? 3 : 4;\n\n        assembly {\n            let sellCallData := mload(add(sell, mul(0x20, 11)))\n            let buyCallData := mload(add(buy, mul(0x20, 11)))\n\n            tokenId := mload(add(sellCallData, add(mul(0x20, 2), 0x04)))\n            buyAmount := mload(add(buyCallData, add(mul(0x20, index), 0x04)))\n            sellAmount := mload(add(sellCallData, add(mul(0x20, index), 0x04)))\n        }\n\n        if (!sellAmountRemaining.tracking) {\n            sellAmountRemaining.tracking = true;\n            sellAmountRemaining.left = sellAmount;\n        }\n\n        require(\n            SafeMath.sub(sellAmountRemaining.left, buyAmount) >= 0,\n            \"Exchange::ERC1155 remaining is not enough!\"\n        );\n\n        sellAmountRemaining.left = SafeMath.sub(\n            sellAmountRemaining.left,\n            buyAmount\n        );\n\n        if (sellAmountRemaining.left == 0) {\n            delete sellOrderAmountRemaining[hash];\n            return (true, buyAmount);\n        }\n\n        return (false, buyAmount);\n    }\n\n    function makeStaticCall(Order memory order, bool callMint)\n        internal\n        returns (bytes memory)\n    {\n        if (callMint) {\n            (bool result, bytes memory returnData) = order.target.call(\n                order.callData\n            );\n            require(result, \"Exchange::Failed when call other contract\");\n\n            return returnData;\n        } else {\n            /* Retrieve delegateProxy contract. */\n            OwnableDelegateProxy delegateProxy = registry.proxies(order.maker);\n            /* Proxy must exist. */\n            require(\n                address(delegateProxy) != address(0),\n                \"User not registed proxy yet!\"\n            );\n            /* Assert implementation. */\n            require(\n                delegateProxy.implementation() ==\n                    registry.delegateProxyImplementation()\n            );\n            /* Execute specified call through proxy. */\n            (bool result, bytes memory returnData) = AuthenticatedProxy(\n                address(delegateProxy)\n            ).proxy(order.target, order.howToCall, order.callData);\n\n            require(result, \"Exchange::Failed when call other contract\");\n\n            return returnData;\n        }\n    }\n\n    struct MatchOrder {\n        bytes32 buyHash;\n        bytes32 sellHash;\n        address maker;\n        address taker;\n        uint256 price;\n    }\n\n    /**\n     * @dev Atomically match two orders, ensuring validity of the match, and execute all associated state transitions. Protected against reentrancy by a contract-global lock.\n     * @param buy Buy-side order\n     * @param buySig Buy-side order signature\n     * @param sell Sell-side order\n     * @param sellSig Sell-side order signature\n     */\n    function atomicMatch(\n        Order memory buy,\n        Sig memory buySig,\n        Order memory sell,\n        Sig memory sellSig,\n        bytes32 metadata\n    ) internal reentrancyGuard {\n        MatchOrder memory matchOrder;\n        /* CHECKS */\n        /* Ensure buy order validity and calculate hash if necessary. */\n\n        bytes32 _sellHash = hashOrder(sell);\n        bytes32 _buyHash = hashOrder(buy);\n\n        if (buy.maker == msg.sender) {\n            require(validateOrderParameters(buy));\n        } else {\n            matchOrder.buyHash = requireValidOrder(buy, buySig);\n        }\n        /* Ensure sell order validity and calculate hash if necessary. */\n\n        if (sell.maker == msg.sender) {\n            require(validateOrderParameters(sell));\n        } else {\n            matchOrder.sellHash = requireValidOrder(sell, sellSig);\n        }\n        /* Must be matchable. */\n        require(\n            ordersCanMatch(buy, sell),\n            \"IzanaNFTExchange:: Order not matched\"\n        );\n        /* Target must exist (prevent malicious selfdestructs just prior to order settlement). */\n        uint256 size;\n        address target = sell.target;\n        assembly {\n            size := extcodesize(target)\n        }\n        require(size > 0);\n\n        bytes4 signature;\n        bool soldOut = true;\n        uint256 amount = 1;\n\n        assembly {\n            let sellCallData := mload(add(sell, mul(0x20, 11)))\n            signature := mload(add(sellCallData, 0x20))\n        }\n\n        if (\n            signature == ERC1155_SIGNATURE ||\n            signature == 0xf242432a ||\n            signature == 0xaba30037 ||\n            signature == 0xe8a568db\n        ) {\n            (soldOut, amount) = _validatePartialSellingAmount(\n                buy,\n                sell,\n                signature == 0xe8a568db\n            );\n        }\n\n        /* Must match calldata after replacement, if specified. */\n        if (buy.replacementPattern.length > 0) {\n            ArrayUtils.guardedArrayReplace(\n                buy.callData,\n                sell.callData,\n                buy.replacementPattern\n            );\n        }\n\n        if (sell.replacementPattern.length > 0) {\n            ArrayUtils.guardedArrayReplace(\n                sell.callData,\n                buy.callData,\n                sell.replacementPattern\n            );\n        }\n\n        require(ArrayUtils.arrayEq(buy.callData, sell.callData));\n\n        /* Mark previously signed or approved orders as finalized. */\n        if (msg.sender != buy.maker) {\n            cancelledOrFinalized[matchOrder.buyHash] = true;\n        }\n        if (msg.sender != sell.maker && soldOut) {\n            cancelledOrFinalized[matchOrder.sellHash] = true;\n        }\n\n        makeStaticCall(\n            sell,\n            (signature == 0x9f6ed25f || signature == 0xe8a568db)\n        );\n\n        uint256 _tokenId;\n        assembly {\n            let sellCallData := mload(add(sell, mul(0x20, 11)))\n            _tokenId := mload(add(sellCallData, add(mul(0x20, 2), 0x04)))\n        }\n        // /* Execute funds transfer and pay fees. */\n        matchOrder.price = executeFundsTransfer(buy, sell, amount, _tokenId);\n\n        matchOrder.maker = buy.maker;\n        matchOrder.taker = sell.maker;\n\n        // /* Log match event. */\n        emit OrdersMatched(\n            _buyHash,\n            _sellHash,\n            matchOrder.maker,\n            matchOrder.taker,\n            matchOrder.price,\n            _tokenId,\n            target,\n            amount,\n            metadata\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IIzanaNFTStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"../libraries/LibPart.sol\";\n\ninterface IIzanaNFTStore {\n    function singleTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external returns (uint256);\n\n    function mintTo(address _to, LibPart.Part memory _royalty)\n        external\n        returns (uint256);\n\n    function owner() external view returns (address);\n}\n"
    },
    "contracts/IzanaNFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./Store.sol\";\n\n/**\n * @title ERC1155Tradable\n * ERC1155Tradable - ERC1155 contract that whitelists a trading address, and has minting functionality.\n */\ncontract IzanaNFT1155 is ERC1155Upgradeable, OwnableUpgradeable {\n    using SafeMath for uint256;\n    string private _name;\n    string private _symbol;\n\n    address public exchangeAddress;\n    address public proxyRegistryAddress;\n    string private _extendedTokenURI;\n    string private contractURI_;\n\n    mapping(uint256 => string) private _eTokenURIs;\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        string memory _tokenURI,\n        string memory _contractURI,\n        address _proxyRegistryAddress,\n        address _exchangeAddress\n    ) external initializer {\n        __Ownable_init();\n        __ERC1155_init(_tokenURI);\n        _name = name_;\n        _symbol = symbol_;\n        proxyRegistryAddress = _proxyRegistryAddress;\n        _extendedTokenURI = _tokenURI;\n        exchangeAddress = _exchangeAddress;\n        contractURI_ = _contractURI;\n\n        transferOwnership(tx.origin);\n    }\n\n    function contractURI() external view returns (string memory) {\n        return contractURI_;\n    }\n\n    function mintTo(\n        address _to,\n        uint256 _tokenId,\n        uint256 amount,\n        bytes memory data,\n        string memory _metadataURI\n    ) public returns (uint256) {\n        require(\n            ProxyRegistry(proxyRegistryAddress).contracts(_msgSender()) ||\n                _msgSender() == owner(),\n            \"ERC1155Tradable::sender is not owner or approved!\"\n        );\n\n        _mint(_to, _tokenId, amount, data);\n        _eTokenURIs[_tokenId] = _metadataURI;\n        return _tokenId;\n    }\n\n    function transfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        uint256 amount,\n        bytes memory data,\n        string memory _metadataURI\n    ) external returns (uint256) {\n        uint256 balance = balanceOf(_from, _tokenId);\n        uint256 left = amount;\n        if (balance != 0) {\n            uint256 transfer_ = amount;\n            if (balance < amount) {\n                transfer_ = balance;\n            }\n            safeTransferFrom(_from, _to, _tokenId, transfer_, data);\n            left = amount - transfer_;\n        }\n        if (left > 0) {\n            address _proxy = address(\n                ProxyRegistry(proxyRegistryAddress).proxies(owner())\n            );\n            require(\n                ProxyRegistry(proxyRegistryAddress).contracts(_msgSender()) ||\n                    _msgSender() == owner() ||\n                    _msgSender() == _proxy,\n                \"ERC1155Tradable::sender is not owner or approved!\"\n            );\n            _mint(_to, _tokenId, left, data);\n\n            string memory _tokenURI = _eTokenURIs[_tokenId];\n            if (bytes(_tokenURI).length == 0)\n                _eTokenURIs[_tokenId] = _metadataURI;\n        }\n        return _tokenId;\n    }\n\n    function baseTokenURI() public view virtual returns (string memory) {\n        return _extendedTokenURI;\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        string memory _tokenURI = _eTokenURIs[_tokenId];\n        string memory base = baseTokenURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, Strings.toString(_tokenId)));\n    }\n\n    function modifyExtendedURI(string memory extendedTokenURI_)\n        external\n        onlyOwner\n    {\n        _extendedTokenURI = extendedTokenURI_;\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Whitelist OpenSea proxy contract for easy trading.\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        if (address(proxyRegistry.proxies(owner)) == operator) {\n            return true;\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/IzanaNFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./Store.sol\";\n\n/**\n * @title ERC721Tradable\n * ERC721Tradable - ERC721 contract that whitelists a trading address, and has minting functionality.\n */\ncontract IzanaNFT721 is ERC721Upgradeable, OwnableUpgradeable {\n    using SafeMath for uint256;\n\n    address public exchangeAddress;\n    address public proxyRegistryAddress;\n    string private contractURI_;\n    string private _extendedTokenURI;\n\n    mapping(uint256 => string) private _eTokenURIs;\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        string memory _tokenURI,\n        string memory _contractURI,\n        address _proxyRegistryAddress,\n        address _exchangeAddress\n    ) external initializer {\n        __Ownable_init();\n        __ERC721_init(_name, _symbol);\n        proxyRegistryAddress = _proxyRegistryAddress;\n        _extendedTokenURI = _tokenURI;\n        exchangeAddress = _exchangeAddress;\n        contractURI_ = _contractURI;\n\n        transferOwnership(tx.origin);\n    }\n\n    function contractURI() external view returns (string memory) {\n        return contractURI_;\n    }\n\n    function mintTo(\n        address _to,\n        uint256 _tokenId,\n        string memory _metadataURI\n    ) public returns (uint256) {\n        require(\n            ProxyRegistry(proxyRegistryAddress).contracts(_msgSender()) ||\n                _msgSender() == owner(),\n            \"ERC721Tradable::sender is not owner or approved!\"\n        );\n        _mint(_to, _tokenId);\n        _eTokenURIs[_tokenId] = _metadataURI;\n        return _tokenId;\n    }\n\n    function mintAndTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        string memory _metadataURI\n    ) external returns (uint256) {\n        if (_exists(_tokenId)) {\n            address owner = ownerOf(_tokenId);\n            require(\n                owner == _from,\n                \"ERC721Tradable::Token ID not belong to user!\"\n            );\n            require(\n                isApprovedForAll(owner, _msgSender()),\n                \"ERC721Tradable::sender is not approved!\"\n            );\n            _transfer(_from, _to, _tokenId);\n        } else {\n            address _proxy = address(\n                ProxyRegistry(proxyRegistryAddress).proxies(owner())\n            );\n            require(\n                ProxyRegistry(proxyRegistryAddress).contracts(_msgSender()) ||\n                    _msgSender() == owner() ||\n                    _msgSender() == _proxy,\n                \"ERC721Tradable::sender is not owner or approved!\"\n            );\n\n            _mint(_to, _tokenId);\n            _eTokenURIs[_tokenId] = _metadataURI;\n        }\n\n        return _tokenId;\n    }\n\n    function singleTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external returns (uint256) {\n        if (_exists(_tokenId)) {\n            address owner = ownerOf(_tokenId);\n            require(\n                owner == _from,\n                \"ERC721Tradable::Token ID not belong to user!\"\n            );\n            require(\n                isApprovedForAll(owner, _msgSender()),\n                \"ERC721Tradable::sender is not approved!\"\n            );\n            _transfer(_from, _to, _tokenId);\n        }\n\n        return _tokenId;\n    }\n\n    function baseTokenURI() public view virtual returns (string memory) {\n        return _extendedTokenURI;\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        string memory _tokenURI = _eTokenURIs[_tokenId];\n        string memory base = baseTokenURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, Strings.toString(_tokenId)));\n    }\n\n    function modifyExtendedURI(string memory extendedTokenURI_)\n        external\n        onlyOwner\n    {\n        _extendedTokenURI = extendedTokenURI_;\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Whitelist OpenSea proxy contract for easy trading.\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        if (address(proxyRegistry.proxies(owner)) == operator) {\n            return true;\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/IzanaNFTExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./exchange/Exchange.sol\";\nimport \"./registry/ProxyRegistry.sol\";\nimport \"./modules/IzanaNFTTransferProxy.sol\";\nimport \"./royalties/RoyaltyFeeRegistry.sol\";\n\ncontract IzanaNFTExchange is Exchange {\n    string public constant name = \"IzanaNFT Exchange\";\n\n    /**\n     * @dev Initialize a WyvernExchange instance\n     * @param registryAddress Address of the registry instance which this Exchange instance will use\n     */\n    constructor(\n        ProxyRegistry registryAddress,\n        IzanaNFTTransferProxy tokenTransferProxyAddress,\n        RoyaltyFeeRegistry royaltyFeeRegistryAddress\n    ) {\n        royaltyFeeRegistry = royaltyFeeRegistryAddress;\n        registry = registryAddress;\n        tokenTransferProxy = tokenTransferProxyAddress;\n    }\n}\n"
    },
    "contracts/IzanaNFTFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./libraries/Clones.sol\";\nimport \"./IzanaNFT1155.sol\";\nimport \"./IzanaNFT721.sol\";\n\ncontract IzanaNFTFactory is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public totalCollections;\n    IzanaNFT721 private impl;\n    IzanaNFT1155 private implMultiple;\n    address private _proxyRegistryAddress;\n    address private _exchangeAddress;\n\n    mapping(address => address[]) public collections;\n    mapping(address => address[]) public collectionsMutilpleSupply;\n\n    event CollectionDeployed(\n        address collection,\n        address creator,\n        string tokenURI\n    );\n    event CollectionRegistrySettled(address oldRegistry, address newRegistry);\n    event CollectionExchangeSettled(address oldExchange, address newExchange);\n\n    constructor(\n        IzanaNFT1155 _implMultiple,\n        IzanaNFT721 _impl,\n        address _registry,\n        address _exchange\n    ) {\n        require(_registry != address(0), \"Invalid Address\");\n        require(_exchange != address(0), \"Invalid Address\");\n        impl = _impl;\n        implMultiple = _implMultiple;\n        _proxyRegistryAddress = _registry;\n        _exchangeAddress = _exchange;\n    }\n\n    function setProxyRegistry(address _registry) external onlyOwner {\n        require(\n            _registry != _proxyRegistryAddress,\n            \"IzanaNFTFactory::SAME REGISTRY ADDRESS\"\n        );\n        emit CollectionRegistrySettled(_proxyRegistryAddress, _registry);\n        _proxyRegistryAddress = _registry;\n    }\n\n    function setNewExchange(address _exchange) external onlyOwner {\n        require(\n            _exchange != _exchangeAddress,\n            \"IzanaNFTFactory::SAME EXCHANGE ADDRESS\"\n        );\n        emit CollectionExchangeSettled(_exchangeAddress, _exchange);\n        _exchangeAddress = _exchange;\n    }\n\n    function newCollection(\n        string memory _name,\n        string memory _symbol,\n        string memory _tokenURI,\n        string memory _contractURI\n    ) external returns (address) {\n        address newCollection_ = Clones.clone(address(impl));\n        address sender = msg.sender;\n\n        IzanaNFT721(newCollection_).initialize(\n            _name,\n            _symbol,\n            _tokenURI,\n            _contractURI,\n            _proxyRegistryAddress,\n            _exchangeAddress\n        );\n\n        collections[sender].push(newCollection_);\n        totalCollections = totalCollections.add(1);\n\n        emit CollectionDeployed(newCollection_, sender, _tokenURI);\n\n        return newCollection_;\n    }\n\n    function newCollectionMultipleSupply(\n        string memory _name,\n        string memory _symbol,\n        string memory _tokenURI,\n        string memory _contractURI\n    ) external returns (address) {\n        address newCollection_ = Clones.clone(address(implMultiple));\n        address sender = msg.sender;\n\n        IzanaNFT1155(newCollection_).initialize(\n            _name,\n            _symbol,\n            _tokenURI,\n            _contractURI,\n            _proxyRegistryAddress,\n            _exchangeAddress\n        );\n\n        collectionsMutilpleSupply[sender].push(newCollection_);\n        totalCollections = totalCollections.add(1);\n\n        emit CollectionDeployed(newCollection_, sender, _tokenURI);\n\n        return newCollection_;\n    }\n}\n"
    },
    "contracts/IzanaNFTRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./registry/ProxyRegistry.sol\";\nimport \"./registry/AuthenticatedProxy.sol\";\nimport \"./libraries/ReentrancyGuarded.sol\";\n\n/**\n * @title WyvernRegistry\n * @author Wyvern Protocol Developers\n */\ncontract IzanaNFTRegistry is ProxyRegistry, ReentrancyGuarded {\n    string public constant name = \"Wyvern Protocol Proxy Registry\";\n\n    /* Whether the initial auth address has been set. */\n    bool public initialAddressSet = false;\n\n    constructor() {\n        AuthenticatedProxy impl = new AuthenticatedProxy();\n        impl.initialize(address(this), this);\n        impl.setRevoke(true);\n        delegateProxyImplementation = address(impl);\n    }\n\n    /**\n     * Grant authentication to the initial Exchange protocol contract\n     *\n     * @dev No delay, can only be called once - after that the standard registry process with a delay must be used\n     * @param authAddress Address of the contract to grant authentication\n     */\n    function grantInitialAuthentication(address authAddress) public onlyOwner {\n        require(\n            !initialAddressSet,\n            \"Wyvern Protocol Proxy Registry initial address already set\"\n        );\n        initialAddressSet = true;\n        contracts[authAddress] = true;\n    }\n}\n"
    },
    "contracts/libraries/ArrayUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title ArrayUtils\n * @author Wyvern Protocol Developers\n */\nlibrary ArrayUtils {\n    /**\n     * Replace bytes in an array with bytes in another array, guarded by a bitmask\n     * Efficiency of this function is a bit unpredictable because of the EVM's word-specific model (arrays under 32 bytes will be slower)\n     * Modifies the provided byte array parameter in place\n     *\n     * @dev Mask must be the size of the byte array. A nonzero byte means the byte array can be changed.\n     * @param array The original array\n     * @param desired The target array\n     * @param mask The mask specifying which bits can be changed\n     */\n    function guardedArrayReplace(\n        bytes memory array,\n        bytes memory desired,\n        bytes memory mask\n    ) internal pure {\n        require(\n            array.length == desired.length,\n            \"Arrays have different lengths\"\n        );\n        require(\n            array.length == mask.length,\n            \"Array and mask have different lengths\"\n        );\n\n        uint256 words = array.length / 0x20;\n        uint256 index = words * 0x20;\n        assert(index / 0x20 == words);\n        uint256 i;\n\n        for (i = 0; i < words; i++) {\n            /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\n            assembly {\n                let commonIndex := mul(0x20, add(1, i))\n                let maskValue := mload(add(mask, commonIndex))\n                mstore(\n                    add(array, commonIndex),\n                    or(\n                        and(not(maskValue), mload(add(array, commonIndex))),\n                        and(maskValue, mload(add(desired, commonIndex)))\n                    )\n                )\n            }\n        }\n\n        /* Deal with the last section of the byte array. */\n        if (words > 0) {\n            /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\n            i = words;\n            assembly {\n                let commonIndex := mul(0x20, add(1, i))\n                let maskValue := mload(add(mask, commonIndex))\n                mstore(\n                    add(array, commonIndex),\n                    or(\n                        and(not(maskValue), mload(add(array, commonIndex))),\n                        and(maskValue, mload(add(desired, commonIndex)))\n                    )\n                )\n            }\n        } else {\n            /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\n               (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\n            for (i = index; i < array.length; i++) {\n                array[i] =\n                    ((mask[i] ^ 0xff) & array[i]) |\n                    (mask[i] & desired[i]);\n            }\n        }\n    }\n\n    /**\n     * Test if two arrays are equal\n     * Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\n     *\n     * @dev Arrays must be of equal length, otherwise will return false\n     * @param a First array\n     * @param b Second array\n     * @return Whether or not all bytes in the arrays are equal\n     */\n    function arrayEq(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            let length := mload(a)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(b))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(a, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(b, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    /**\n     * Drop the beginning of an array\n     *\n     * @param _bytes array\n     * @param _start start index\n     * @return Whether or not all bytes in the arrays are equal\n     */\n    function arrayDrop(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        uint256 _length = SafeMath.sub(_bytes.length, _start);\n        return arraySlice(_bytes, _start, _length);\n    }\n\n    /**\n     * Take from the beginning of an array\n     *\n     * @param _bytes array\n     * @param _length elements to take\n     * @return Whether or not all bytes in the arrays are equal\n     */\n    function arrayTake(bytes memory _bytes, uint256 _length)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return arraySlice(_bytes, 0, _length);\n    }\n\n    /**\n     * Slice an array\n     * Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\n     *\n     * @param _bytes array\n     * @param _start start index\n     * @param _length length to take\n     * @return Whether or not all bytes in the arrays are equal\n     */\n    function arraySlice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(\n                    add(tempBytes, lengthmod),\n                    mul(0x20, iszero(lengthmod))\n                )\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(\n                        add(\n                            add(_bytes, lengthmod),\n                            mul(0x20, iszero(lengthmod))\n                        ),\n                        _start\n                    )\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    /**\n     * Unsafe write byte array into a memory location\n     *\n     * @param index Memory location\n     * @param source Byte array to write\n     * @return End memory index\n     */\n    function unsafeWriteBytes(uint256 index, bytes memory source)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (source.length > 0) {\n            assembly {\n                let length := mload(source)\n                let end := add(source, add(0x20, length))\n                let arrIndex := add(source, 0x20)\n                let tempIndex := index\n                for {\n\n                } eq(lt(arrIndex, end), 1) {\n                    arrIndex := add(arrIndex, 0x20)\n                    tempIndex := add(tempIndex, 0x20)\n                } {\n                    mstore(tempIndex, mload(arrIndex))\n                }\n                index := add(index, length)\n            }\n        }\n        return index;\n    }\n\n    /**\n     * Unsafe write address into a memory location\n     *\n     * @param index Memory location\n     * @param source Address to write\n     * @return End memory index\n     */\n    function unsafeWriteAddress(uint256 index, address source)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 conv = uint256(source) << 0x60;\n        assembly {\n            mstore(index, conv)\n            index := add(index, 0x14)\n        }\n        return index;\n    }\n\n    /**\n     * Unsafe write uint into a memory location\n     *\n     * @param index Memory location\n     * @param source uint to write\n     * @return End memory index\n     */\n    function unsafeWriteUint(uint256 index, uint256 source)\n        internal\n        pure\n        returns (uint256)\n    {\n        assembly {\n            mstore(index, source)\n            index := add(index, 0x20)\n        }\n        return index;\n    }\n\n    /**\n     * Unsafe write uint8 into a memory location\n     *\n     * @param index Memory location\n     * @param source uint8 to write\n     * @return End memory index\n     */\n    function unsafeWriteUint8(uint256 index, uint8 source)\n        internal\n        pure\n        returns (uint256)\n    {\n        assembly {\n            mstore8(index, source)\n            index := add(index, 0x1)\n        }\n        return index;\n    }\n}\n"
    },
    "contracts/libraries/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\n            )\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/libraries/LibPart.sol": {
      "content": "// SPDX-License-Identifier: MIT pragma\npragma solidity 0.7.5;\n\nlibrary LibPart {\n    bytes32 public constant TYPE_HASH =\n        keccak256(\"Part(address account,uint96 value)\");\n\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n\n    function hash(Part memory part) internal pure returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\n    }\n}\n"
    },
    "contracts/libraries/ReentrancyGuarded.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n/**\n * @title ReentrancyGuarded\n * @author Wyvern Protocol Developers\n */\ncontract ReentrancyGuarded {\n    bool reentrancyLock = false;\n\n    /* Prevent a contract function from being reentrant-called. */\n    modifier reentrancyGuard() {\n        require(!reentrancyLock, \"Reentrancy detected\");\n        reentrancyLock = true;\n        _;\n        reentrancyLock = false;\n    }\n}\n"
    },
    "contracts/libraries/SaleKindInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary SaleKindInterface {\n    /**\n     * Side: buy or sell.\n     */\n    enum Side {\n        Buy,\n        Sell\n    }\n\n    /**\n     * Currently supported kinds of sale: fixed price, Dutch auction.\n     * English auctions cannot be supported without stronger escrow guarantees.\n     * Future interesting options: Vickrey auction, nonlinear Dutch auctions.\n     */\n    enum SaleKind {\n        FixedPrice,\n        DutchAuction\n    }\n\n    /**\n     * @dev Check whether the parameters of a sale are valid\n     * @param saleKind Kind of sale\n     * @param expirationTime Order expiration time\n     * @return Whether the parameters were valid\n     */\n    function validateParameters(SaleKind saleKind, uint256 expirationTime)\n        internal\n        pure\n        returns (bool)\n    {\n        /* Auctions must have a set expiration date. */\n        return (saleKind == SaleKind.FixedPrice || expirationTime > 0);\n    }\n\n    /**\n     * @dev Return whether or not an order can be settled\n     * @dev Precondition: parameters have passed validateParameters\n     * @param listingTime Order listing time\n     * @param expirationTime Order expiration time\n     */\n    function canSettleOrder(uint256 listingTime, uint256 expirationTime)\n        internal\n        view\n        returns (bool)\n    {\n        return\n            (listingTime < block.timestamp) &&\n            (expirationTime == 0 || block.timestamp < expirationTime);\n    }\n\n    /**\n     * @dev Calculate the settlement price of an order\n     * @dev Precondition: parameters have passed validateParameters.\n     * @param side Order side\n     * @param saleKind Method of sale\n     * @param basePrice Order base price\n     * @param extra Order extra price data\n     * @param listingTime Order listing time\n     * @param expirationTime Order expiration time\n     */\n    function calculateFinalPrice(\n        Side side,\n        SaleKind saleKind,\n        uint256 basePrice,\n        uint256 extra,\n        uint256 listingTime,\n        uint256 expirationTime,\n        uint256 amount\n    ) internal view returns (uint256 finalPrice) {\n        if (saleKind == SaleKind.FixedPrice) {\n            return SafeMath.mul(basePrice, amount);\n        } else if (saleKind == SaleKind.DutchAuction) {\n            uint256 diff = SafeMath.div(\n                SafeMath.mul(extra, SafeMath.sub(block.timestamp, listingTime)),\n                SafeMath.sub(expirationTime, listingTime)\n            );\n            if (side == Side.Sell) {\n                /* Sell-side - start price: basePrice. End price: basePrice - extra. */\n                return SafeMath.sub(SafeMath.mul(basePrice, amount), diff);\n            } else {\n                /* Buy-side - start price: basePrice. End price: basePrice + extra. */\n                return SafeMath.add(SafeMath.mul(basePrice, amount), diff);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeApprove: approve failed\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n}\n"
    },
    "contracts/modules/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./ERC20Basic.sol\";\n\ninterface ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "contracts/modules/ERC20Basic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface ERC20Basic {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n"
    },
    "contracts/modules/IzanaNFTTransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../registry/ProxyRegistry.sol\";\nimport \"../libraries/TransferHelper.sol\";\nimport \"./ERC20.sol\";\n\ncontract IzanaNFTTransferProxy {\n    /* Authentication registry. */\n    ProxyRegistry public registry;\n\n    constructor(ProxyRegistry _registry) {\n        require(address(_registry) != address(0), \"INVALID REGISTRY\");\n        registry = _registry;\n    }\n\n    /**\n     * Call ERC20 `transferFrom`\n     *\n     * @dev Authenticated contract only\n     * @param token ERC20 token address\n     * @param from From address\n     * @param to To address\n     * @param amount Transfer amount\n     */\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    ) public {\n        require(registry.contracts(msg.sender));\n        TransferHelper.safeTransferFrom(token, from, to, amount);\n    }\n}\n"
    },
    "contracts/registry/AuthenticatedProxy.sol": {
      "content": "/* \n\n  Proxy contract to hold access to assets on behalf of a user (e.g. ERC20 approve) and execute calls under particular conditions.\n\n*/\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./ProxyRegistry.sol\";\nimport \"./TokenRecipient.sol\";\nimport \"./proxy/OwnedUpgradeabilityStorage.sol\";\n\n/**\n * @title AuthenticatedProxy\n * @author Wyvern Protocol Developers\n */\ncontract AuthenticatedProxy is TokenRecipient, OwnedUpgradeabilityStorage {\n    /* Whether initialized. */\n    bool initialized = false;\n\n    /* Address which owns this proxy. */\n    address public user;\n\n    /* Associated registry with contract authentication information. */\n    ProxyRegistry public registry;\n\n    /* Whether access has been revoked. */\n    bool public revoked;\n\n    /* Delegate call could be used to atomically transfer multiple assets owned by the proxy contract with one order. */\n    enum HowToCall {\n        Call,\n        DelegateCall\n    }\n\n    /* Event fired when the proxy access is revoked or unrevoked. */\n    event Revoked(bool revoked);\n\n    /**\n     * Initialize an AuthenticatedProxy\n     *\n     * @param addrUser Address of user on whose behalf this proxy will act\n     * @param addrRegistry Address of ProxyRegistry contract which will manage this proxy\n     */\n    function initialize(address addrUser, ProxyRegistry addrRegistry) public {\n        require(!initialized, \"Authenticated proxy already initialized\");\n        initialized = true;\n        user = addrUser;\n        registry = addrRegistry;\n    }\n\n    /**\n     * Set the revoked flag (allows a user to revoke ProxyRegistry access)\n     *\n     * @dev Can be called by the user only\n     * @param revoke Whether or not to revoke access\n     */\n    function setRevoke(bool revoke) public {\n        require(\n            msg.sender == user,\n            \"Authenticated proxy can only be revoked by its user\"\n        );\n        revoked = revoke;\n        emit Revoked(revoke);\n    }\n\n    /**\n     * Execute a message call from the proxy contract\n     *\n     * @dev Can be called by the user, or by a contract authorized by the registry as long as the user has not revoked access\n     * @param dest Address to which the call will be sent\n     * @param howToCall Which kind of call to make\n     * @param data Calldata to send\n     * @return result Result of the call (success or failure)\n     */\n    function proxy(\n        address dest,\n        HowToCall howToCall,\n        bytes memory data\n    ) public returns (bool result, bytes memory ret) {\n        require(\n            msg.sender == user || (!revoked && registry.contracts(msg.sender)),\n            \"Authenticated proxy can only be called by its user, or by a contract authorized by the registry as long as the user has not revoked access\"\n        );\n        if (howToCall == HowToCall.Call) {\n            (result, ret) = dest.call(data);\n        } else if (howToCall == HowToCall.DelegateCall) {\n            (result, ret) = dest.delegatecall(data);\n        }\n    }\n\n    /**\n     * Execute a message call and assert success\n     *\n     * @dev Same functionality as `proxy`, just asserts the return value\n     * @param dest Address to which the call will be sent\n     * @param howToCall What kind of call to make\n     * @param data Calldata to send\n     */\n    function proxyAssert(\n        address dest,\n        HowToCall howToCall,\n        bytes memory data\n    ) public {\n        (bool result, ) = proxy(dest, howToCall, data);\n        require(result, \"Proxy assertion failed\");\n    }\n}\n"
    },
    "contracts/registry/OwnableDelegateProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./proxy/OwnedUpgradeabilityProxy.sol\";\n\n/**\n * @title OwnableDelegateProxy\n * @author Wyvern Protocol Developers\n */\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\n    constructor(\n        address owner,\n        address initialImplementation,\n        bytes memory data\n    ) {\n        require(owner != address(0), \"owner: zero address\");\n        require(\n            initialImplementation != address(0),\n            \"initialImplementation: zero address\"\n        );\n        setUpgradeabilityOwner(owner);\n        _upgradeTo(initialImplementation);\n        (bool success, ) = initialImplementation.delegatecall(data);\n        require(success, \"OwnableDelegateProxy failed implementation\");\n    }\n}\n"
    },
    "contracts/registry/proxy/OwnedUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./Proxy.sol\";\nimport \"./OwnedUpgradeabilityStorage.sol\";\n\n/**\n * @title OwnedUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract OwnedUpgradeabilityProxy is Proxy, OwnedUpgradeabilityStorage {\n    /**\n     * @dev Event to show ownership has been transferred\n     * @param previousOwner representing the address of the previous owner\n     * @param newOwner representing the address of the new owner\n     */\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n     * @dev This event will be emitted every time the implementation gets upgraded\n     * @param implementation representing the address of the upgraded implementation\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Tells the address of the current implementation\n     * @return address of the current implementation\n     */\n    function implementation() public view override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Tells the proxy type (EIP 897)\n     * @return proxyTypeId Proxy type, 2 for forwarding proxy\n     */\n    function proxyType() public pure override returns (uint256 proxyTypeId) {\n        return 2;\n    }\n\n    /**\n     * @dev Upgrades the implementation address\n     * @param implementation_ representing the address of the new implementation to be set\n     */\n    function _upgradeTo(address implementation_) internal {\n        require(\n            _implementation != implementation_,\n            \"Proxy already uses this implementation\"\n        );\n        _implementation = implementation_;\n        emit Upgraded(implementation_);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyProxyOwner() {\n        require(\n            msg.sender == proxyOwner(),\n            \"Only the proxy owner can call this method\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Tells the address of the proxy owner\n     * @return the address of the proxy owner\n     */\n    function proxyOwner() public view returns (address) {\n        return upgradeabilityOwner();\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\n        require(newOwner != address(0), \"New owner cannot be the null address\");\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\n        setUpgradeabilityOwner(newOwner);\n    }\n\n    /**\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\n     * @param implementation_ representing the address of the new implementation to be set.\n     */\n    function upgradeTo(address implementation_) public onlyProxyOwner {\n        _upgradeTo(implementation_);\n    }\n\n    /**\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\n     * and delegatecall the new implementation for initialization.\n     * @param implementation_ representing the address of the new implementation to be set.\n     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\n     * signature of the implementation to be called with the needed payload\n     */\n    function upgradeToAndCall(address implementation_, bytes memory data)\n        public\n        payable\n        onlyProxyOwner\n    {\n        upgradeTo(implementation_);\n        (bool success, ) = address(this).delegatecall(data);\n        require(success, \"Call failed after proxy upgrade\");\n    }\n}\n"
    },
    "contracts/registry/proxy/OwnedUpgradeabilityStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n/**\n * @title OwnedUpgradeabilityStorage\n * @dev This contract keeps track of the upgradeability owner\n */\ncontract OwnedUpgradeabilityStorage {\n    // Current implementation\n    address internal _implementation;\n\n    // Owner of the contract\n    address private _upgradeabilityOwner;\n\n    /**\n     * @dev Tells the address of the owner\n     * @return the address of the owner\n     */\n    function upgradeabilityOwner() public view returns (address) {\n        return _upgradeabilityOwner;\n    }\n\n    /**\n     * @dev Sets the address of the owner\n     */\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\n        _upgradeabilityOwner = newUpgradeabilityOwner;\n    }\n}\n"
    },
    "contracts/registry/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n/**\n * @title Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\nabstract contract Proxy {\n    /**\n     * @dev Tells the address of the implementation where every call will be delegated.\n     * @return address of the implementation to which it will be delegated\n     */\n    function implementation() public view virtual returns (address);\n\n    /**\n     * @dev Tells the type of proxy (EIP 897)\n     * @return proxyTypeId Type of proxy, 2 for upgradeable proxy\n     */\n    function proxyType() public pure virtual returns (uint256 proxyTypeId);\n\n    /**\n     * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n     * This function will return whatever the implementation call returns\n     */\n    fallback() external payable {\n        _receiveNativeToken();\n    }\n\n    /**\n     * @dev Receive function allowing to perform a delegatecall to the given implementation.\n     * This function will return whatever the implementation call returns\n     */\n    receive() external payable {\n        _receiveNativeToken();\n    }\n\n    function _receiveNativeToken() private {\n        address _impl = implementation();\n        require(_impl != address(0), \"Proxy implementation required\");\n\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize())\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 {\n                revert(ptr, size)\n            }\n            default {\n                return(ptr, size)\n            }\n        }\n    }\n}\n"
    },
    "contracts/registry/ProxyRegistry.sol": {
      "content": "/*\n\n  Proxy registry; keeps a mapping of AuthenticatedProxy contracts and mapping of contracts authorized to access them.  \n  \n  Abstracted away from the Exchange (a) to reduce Exchange attack surface and (b) so that the Exchange contract can be upgraded without users needing to transfer assets to new proxies.\n\n*/\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./OwnableDelegateProxy.sol\";\nimport \"./ProxyRegistryInterface.sol\";\n\n/**\n * @title ProxyRegistry\n * @author Wyvern Protocol Developers\n */\ncontract ProxyRegistry is Ownable, ProxyRegistryInterface {\n    /* DelegateProxy implementation contract. Must be initialized. */\n    address public override delegateProxyImplementation;\n\n    /* Authenticated proxies by user. */\n    mapping(address => OwnableDelegateProxy) public override proxies;\n\n    /* Contracts pending access. */\n    mapping(address => uint256) public pending;\n\n    /* Contracts allowed to call those proxies. */\n    mapping(address => bool) public contracts;\n\n    /* Delay period for adding an authenticated contract.\n       This mitigates a particular class of potential attack on the Wyvern DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the WYV supply (votes in the DAO),\n       a malicious but rational attacker could buy half the Wyvern and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given two weeks, if that happened, users would have\n       plenty of time to notice and transfer their assets.\n    */\n    uint256 public delayPeriod;\n\n    function setDelayPeriod(uint256 _delayPeriod) external onlyOwner {\n        delayPeriod = _delayPeriod;\n    }\n\n    /**\n     * Start the process to enable access for specified contract. Subject to delay period.\n     *\n     * @dev ProxyRegistry owner only\n     * @param addr Address to which to grant permissions\n     */\n    function startGrantAuthentication(address addr) public onlyOwner {\n        require(\n            !contracts[addr] && pending[addr] == 0,\n            \"Contract is already allowed in registry, or pending\"\n        );\n        pending[addr] = block.timestamp;\n    }\n\n    /**\n     * End the process to enable access for specified contract after delay period has passed.\n     *\n     * @dev ProxyRegistry owner only\n     * @param addr Address to which to grant permissions\n     */\n    function endGrantAuthentication(address addr) public onlyOwner {\n        require(\n            !contracts[addr] &&\n                pending[addr] != 0 &&\n                ((pending[addr] + delayPeriod) < block.timestamp),\n            \"Contract is no longer pending or has already been approved by registry\"\n        );\n        pending[addr] = 0;\n        contracts[addr] = true;\n    }\n\n    /**\n     * Revoke access for specified contract. Can be done instantly.\n     *\n     * @dev ProxyRegistry owner only\n     * @param addr Address of which to revoke permissions\n     */\n    function revokeAuthentication(address addr) public onlyOwner {\n        contracts[addr] = false;\n    }\n\n    /**\n     * Register a proxy contract with this registry\n     *\n     * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\n     * @return proxy New AuthenticatedProxy contract\n     */\n    function registerProxy() public returns (OwnableDelegateProxy proxy) {\n        return registerProxyFor(msg.sender);\n    }\n\n    /**\n     * Register a proxy contract with this registry, overriding any existing proxy\n     *\n     * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\n     * @return proxy New AuthenticatedProxy contract\n     */\n    function registerProxyOverride()\n        public\n        returns (OwnableDelegateProxy proxy)\n    {\n        proxy = new OwnableDelegateProxy(\n            msg.sender,\n            delegateProxyImplementation,\n            abi.encodeWithSignature(\n                \"initialize(address,address)\",\n                msg.sender,\n                address(this)\n            )\n        );\n        proxies[msg.sender] = proxy;\n        return proxy;\n    }\n\n    /**\n     * Register a proxy contract with this registry\n     *\n     * @dev Can be called by any user\n     * @return proxy New AuthenticatedProxy contract\n     */\n    function registerProxyFor(address user)\n        public\n        returns (OwnableDelegateProxy proxy)\n    {\n        require(\n            proxies[user] == OwnableDelegateProxy(0),\n            \"User already has a proxy\"\n        );\n        proxy = new OwnableDelegateProxy(\n            user,\n            delegateProxyImplementation,\n            abi.encodeWithSignature(\n                \"initialize(address,address)\",\n                user,\n                address(this)\n            )\n        );\n        proxies[user] = proxy;\n        return proxy;\n    }\n\n    /**\n     * Transfer access\n     */\n    function transferAccessTo(address from, address to) public {\n        OwnableDelegateProxy proxy = proxies[from];\n\n        /* CHECKS */\n        require(\n            OwnableDelegateProxy(msg.sender) == proxy,\n            \"Proxy transfer can only be called by the proxy\"\n        );\n        require(\n            proxies[to] == OwnableDelegateProxy(0),\n            \"Proxy transfer has existing proxy as destination\"\n        );\n\n        /* EFFECTS */\n        delete proxies[from];\n        proxies[to] = proxy;\n    }\n}\n"
    },
    "contracts/registry/ProxyRegistryInterface.sol": {
      "content": "/*\n\n  Proxy registry interface.\n\n*/\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./OwnableDelegateProxy.sol\";\n\n/**\n * @title ProxyRegistryInterface\n * @author Wyvern Protocol Developers\n */\ninterface ProxyRegistryInterface {\n    function delegateProxyImplementation() external returns (address);\n\n    function proxies(address owner) external returns (OwnableDelegateProxy);\n}\n"
    },
    "contracts/registry/TokenRecipient.sol": {
      "content": "/*\n\n  Token recipient. Modified very slightly from the example on http://ethereum.org/dao (just to index log parameters).\n\n*/\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../modules/ERC20.sol\";\n\n/**\n * @title TokenRecipient\n * @author Wyvern Protocol Developers\n */\ncontract TokenRecipient {\n    event ReceivedEther(address indexed sender, uint256 amount);\n    event ReceivedTokens(\n        address indexed from,\n        uint256 value,\n        address indexed token,\n        bytes extraData\n    );\n\n    /**\n     * @dev Receive tokens and generate a log event\n     * @param from Address from which to transfer tokens\n     * @param value Amount of tokens to transfer\n     * @param token Address of token\n     * @param extraData Additional data to log\n     */\n    function receiveApproval(\n        address from,\n        uint256 value,\n        address token,\n        bytes memory extraData\n    ) public {\n        ERC20 t = ERC20(token);\n        require(\n            t.transferFrom(from, address(this), value),\n            \"ERC20 token transfer failed\"\n        );\n        emit ReceivedTokens(from, value, token, extraData);\n    }\n\n    /**\n     * @dev Receive Ether and generate a log event\n     */\n    fallback() external payable {\n        emit ReceivedEther(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Receive Ether and generate a log event\n     */\n    receive() external payable {\n        emit ReceivedEther(msg.sender, msg.value);\n    }\n}\n"
    },
    "contracts/royalties/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IOwnable {\n    function owner() external view returns (address);\n\n    function admin() external view returns (address);\n\n    function transferOwnership(address _newOwner) external returns (bool);\n\n    function renounceOwnership() external returns (bool);\n}\n"
    },
    "contracts/royalties/interfaces/IRoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IRoyaltyFeeRegistry {\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\n\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external;\n\n    function updateRoyaltyInfoForNFTCollection(\n        address collection,\n        uint256 tokenId,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external;\n\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256\n        );\n\n    function royaltyFeeInfoNFTCollection(address collection, uint256 tokenId)\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256\n        );\n\n    function royaltyInfo(\n        address collection,\n        uint256 amount,\n        uint256 tokenId\n    ) external view returns (address, uint256);\n}\n"
    },
    "contracts/royalties/RoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\n\n/**\n * @title RoyaltyFeeRegistry\n * @notice It is a royalty fee registry for the Helixmeta exchange.\n */\ncontract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, Ownable {\n    struct FeeInfo {\n        address setter;\n        address receiver;\n        uint256 fee;\n    }\n\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\n    uint256 public royaltyFeeLimit;\n\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\n    mapping(address => mapping(uint256 => FeeInfo))\n        private _royaltyFeeInfoNFTCollection;\n\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\n    event RoyaltyFeeUpdate(\n        address indexed collection,\n        address indexed setter,\n        address indexed receiver,\n        uint256 fee\n    );\n\n    event NFTRoyaltyFeeUpdate(\n        uint256 indexed tokenId,\n        address indexed setter,\n        address indexed receiver,\n        uint256 fee\n    );\n\n    /**\n     * @notice Constructor\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    constructor(uint256 _royaltyFeeLimit) {\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\n        royaltyFeeLimit = _royaltyFeeLimit;\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\n        external\n        override\n        onlyOwner\n    {\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\n        royaltyFeeLimit = _royaltyFeeLimit;\n\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external override onlyOwner {\n        require(fee <= royaltyFeeLimit, \"Registry: Royalty fee too high\");\n        _royaltyFeeInfoCollection[collection] = FeeInfo({\n            setter: setter,\n            receiver: receiver,\n            fee: fee\n        });\n\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param collection address of the NFT contract\n     * @param tokenId string number tokenId gen\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForNFTCollection(\n        address collection,\n        uint256 tokenId,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external override onlyOwner {\n        require(fee <= royaltyFeeLimit, \"Registry: Royalty fee too high\");\n        _royaltyFeeInfoNFTCollection[collection][tokenId] = FeeInfo({\n            setter: setter,\n            receiver: receiver,\n            fee: fee\n        });\n\n        emit NFTRoyaltyFeeUpdate(tokenId, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Calculate royalty info for a collection address and a sale gross amount\n     * @param collection collection address\n     * @param amount amount\n     * @return receiver address and amount received by royalty recipient\n     */\n    function royaltyInfo(\n        address collection,\n        uint256 amount,\n        uint256 tokenId\n    ) external view override returns (address, uint256) {\n        if (\n            _royaltyFeeInfoNFTCollection[collection][tokenId].receiver !=\n            address(0)\n        ) {\n            return (\n                _royaltyFeeInfoNFTCollection[collection][tokenId].receiver,\n                (amount *\n                    _royaltyFeeInfoNFTCollection[collection][tokenId].fee) /\n                    10000\n            );\n        }\n        return (\n            _royaltyFeeInfoCollection[collection].receiver,\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\n        );\n    }\n\n    /**\n     * @notice View royalty info for a collection address\n     * @param collection collection address\n     */\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        override\n        returns (\n            address,\n            address,\n            uint256\n        )\n    {\n        return (\n            _royaltyFeeInfoCollection[collection].setter,\n            _royaltyFeeInfoCollection[collection].receiver,\n            _royaltyFeeInfoCollection[collection].fee\n        );\n    }\n\n     /**\n     * @notice View royalty info for a collection address\n     * @param collection collection address\n     * @param tokenId uint256\n     */\n    function royaltyFeeInfoNFTCollection(address collection, uint256 tokenId)\n        external\n        view\n        override\n        returns (\n            address,\n            address,\n            uint256\n        )\n    {\n        return (\n            _royaltyFeeInfoNFTCollection[collection][tokenId].setter,\n            _royaltyFeeInfoNFTCollection[collection][tokenId].receiver,\n            _royaltyFeeInfoNFTCollection[collection][tokenId].fee\n        );\n    }\n}\n"
    },
    "contracts/royalties/RoyaltyFeeSetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/introspection/IERC165.sol\";\n\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\nimport {IOwnable} from \"./interfaces/IOwnable.sol\";\n\n/**\n * @title RoyaltyFeeSetter\n * @notice It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\n */\ncontract RoyaltyFeeSetter is Ownable {\n    // ERC721 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    // ERC1155 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    address public immutable royaltyFeeRegistry;\n\n    /**\n     * @notice Constructor\n     * @param _royaltyFeeRegistry address of the royalty fee registry\n     */\n    constructor(address _royaltyFeeRegistry) {\n        royaltyFeeRegistry = _royaltyFeeRegistry;\n    }\n\n    /**\n     * @notice Update royalty info for collection if admin\n     * @dev Only to be called if there is no setter address\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfAdmin(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        require(\n            msg.sender == IOwnable(collection).admin(),\n            \"Admin: Not the admin\"\n        );\n\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update royalty info for collection if owner\n     * @dev Only to be called if there is no setter address\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfOwner(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        require(\n            msg.sender == IOwnable(collection).owner(),\n            \"Owner: Not the owner\"\n        );\n\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @dev Only to be called if there msg.sender is the setter\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfSetter(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .royaltyFeeInfoCollection(collection);\n        require(msg.sender == currentSetter, \"Setter: Not the setter\");\n\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @dev Only to be called if there msg.sender is the setter\n     * @param collection address of the NFT contract\n     * @param tokenId uint\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForNFTCollection(\n        address collection,\n        uint256 tokenId,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .royaltyFeeInfoNFTCollection(collection, tokenId);\n        require(currentSetter == address(0), \"Inited: pls try again\");\n\n        IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .updateRoyaltyInfoForNFTCollection(\n                collection,\n                tokenId,\n                setter,\n                receiver,\n                fee\n            );\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @dev Can only be called by contract owner (of this)\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external onlyOwner {\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update owner of royalty fee registry\n     * @dev Can be used for migration of this royalty fee setter contract\n     * @param _owner new owner address\n     */\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner)\n        external\n        onlyOwner\n    {\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\n        external\n        onlyOwner\n    {\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(\n            _royaltyFeeLimit\n        );\n    }\n\n    /**\n     * @notice Check royalty info for collection\n     * @param collection collection address\n     * @return (whether there is a setter (address(0 if not)),\n     * Position\n     * 0: Royalty setter is set in the registry\n     * 1: ERC2981 and no setter\n     * 2: setter can be set using owner()\n     * 3: setter can be set using admin()\n     * 4: setter cannot be set, nor support for ERC2981\n     */\n    function checkForCollectionSetter(address collection)\n        external\n        view\n        returns (address, uint8)\n    {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .royaltyFeeInfoCollection(collection);\n\n        if (currentSetter != address(0)) {\n            return (currentSetter, 0);\n        }\n\n        try IOwnable(collection).owner() returns (address setter) {\n            return (setter, 1);\n        } catch {\n            try IOwnable(collection).admin() returns (address setter) {\n                return (setter, 2);\n            } catch {\n                return (address(0), 3);\n            }\n        }\n    }\n\n    /**\n     * @notice Update information and perform checks before updating royalty fee registry\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) internal {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .royaltyFeeInfoCollection(collection);\n        require(currentSetter == address(0), \"Setter: Already set\");\n\n        require(\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\n            \"Setter: Not ERC721/ERC1155\"\n        );\n\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n}\n"
    },
    "contracts/Store.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ncontract OwnableDelegateProxy {}\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n    mapping(address => bool) public contracts;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}