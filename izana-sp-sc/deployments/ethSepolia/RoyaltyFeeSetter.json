{
  "address": "0x788B0CC9821141ccf49A2075DC77435847EfE5D2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC1155",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "checkForCollectionSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "updateOwnerOfRoyaltyFeeRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyFeeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForNFTCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99834e7a73fb0b78f0e535843c3e212c1e8665d5c449a7216c510cd8db5a401c",
  "receipt": {
    "to": null,
    "from": "0x84B78673f8DC0086c9A475fbf9C6B40b5a92d48B",
    "contractAddress": "0x788B0CC9821141ccf49A2075DC77435847EfE5D2",
    "transactionIndex": 41,
    "gasUsed": "1074783",
    "logsBloom": "0x
    "blockHash": "0x046f2d35ac6be31dc7fd3d557f978cb0bdc002ba5fb89a9b0633dfce7305df01",
    "transactionHash": "0x99834e7a73fb0b78f0e535843c3e212c1e8665d5c449a7216c510cd8db5a401c",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 6152207,
        "transactionHash": "0x99834e7a73fb0b78f0e535843c3e212c1e8665d5c449a7216c510cd8db5a401c",
        "address": "0x788B0CC9821141ccf49A2075DC77435847EfE5D2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084b78673f8dc0086c9a475fbf9c6b40b5a92d48b"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x046f2d35ac6be31dc7fd3d557f978cb0bdc002ba5fb89a9b0633dfce7305df01"
      }
    ],
    "blockNumber": 6152207,
    "cumulativeGasUsed": "6465891",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCc41B9c93504C99f4d8C32553EA60758A8d8b39E"
  ],
  "numDeployments": 1,
  "solcInputHash": "90ce8ac33db5a5561a6dddc82de03511",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"checkForCollectionSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwnerOfRoyaltyFeeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkForCollectionSetter(address)\":{\"params\":{\"collection\":\"collection address\"},\"returns\":{\"_0\":\"(whether there is a setter (address(0 if not)), Position 0: Royalty setter is set in the registry 1: ERC2981 and no setter 2: setter can be set using owner() 3: setter can be set using admin() 4: setter cannot be set, nor support for ERC2981\"}},\"constructor\":{\"params\":{\"_royaltyFeeRegistry\":\"address of the royalty fee registry\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwnerOfRoyaltyFeeRegistry(address)\":{\"details\":\"Can be used for migration of this royalty fee setter contract\",\"params\":{\"_owner\":\"new owner address\"}},\"updateRoyaltyFeeLimit(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"details\":\"Can only be called by contract owner (of this)\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)\":{\"details\":\"Only to be called if there is no setter address\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)\":{\"details\":\"Only to be called if there is no setter address\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)\":{\"details\":\"Only to be called if there msg.sender is the setter\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)\":{\"details\":\"Only to be called if there msg.sender is the setter\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\",\"tokenId\":\"uint\"}}},\"title\":\"RoyaltyFeeSetter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkForCollectionSetter(address)\":{\"notice\":\"Check royalty info for collection\"},\"constructor\":{\"notice\":\"Constructor\"},\"updateOwnerOfRoyaltyFeeRegistry(address)\":{\"notice\":\"Update owner of royalty fee registry\"},\"updateRoyaltyFeeLimit(uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection if admin\"},\"updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection if owner\"},\"updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"}},\"notice\":\"It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/royalties/RoyaltyFeeSetter.sol\":\"RoyaltyFeeSetter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/royalties/RoyaltyFeeSetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\n\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport {IOwnable} from \\\"./interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeSetter\\n * @notice It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\\n */\\ncontract RoyaltyFeeSetter is Ownable {\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    address public immutable royaltyFeeRegistry;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeRegistry address of the royalty fee registry\\n     */\\n    constructor(address _royaltyFeeRegistry) {\\n        royaltyFeeRegistry = _royaltyFeeRegistry;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if admin\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(\\n            msg.sender == IOwnable(collection).admin(),\\n            \\\"Admin: Not the admin\\\"\\n        );\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if owner\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfOwner(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(\\n            msg.sender == IOwnable(collection).owner(),\\n            \\\"Owner: Not the owner\\\"\\n        );\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Only to be called if there msg.sender is the setter\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfSetter(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n        require(msg.sender == currentSetter, \\\"Setter: Not the setter\\\");\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Only to be called if there msg.sender is the setter\\n     * @param collection address of the NFT contract\\n     * @param tokenId uint\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForNFTCollection(\\n        address collection,\\n        uint256 tokenId,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoNFTCollection(collection, tokenId);\\n        require(currentSetter == address(0), \\\"Inited: pls try again\\\");\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .updateRoyaltyInfoForNFTCollection(\\n                collection,\\n                tokenId,\\n                setter,\\n                receiver,\\n                fee\\n            );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Can only be called by contract owner (of this)\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external onlyOwner {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update owner of royalty fee registry\\n     * @dev Can be used for migration of this royalty fee setter contract\\n     * @param _owner new owner address\\n     */\\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner)\\n        external\\n        onlyOwner\\n    {\\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        onlyOwner\\n    {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(\\n            _royaltyFeeLimit\\n        );\\n    }\\n\\n    /**\\n     * @notice Check royalty info for collection\\n     * @param collection collection address\\n     * @return (whether there is a setter (address(0 if not)),\\n     * Position\\n     * 0: Royalty setter is set in the registry\\n     * 1: ERC2981 and no setter\\n     * 2: setter can be set using owner()\\n     * 3: setter can be set using admin()\\n     * 4: setter cannot be set, nor support for ERC2981\\n     */\\n    function checkForCollectionSetter(address collection)\\n        external\\n        view\\n        returns (address, uint8)\\n    {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n\\n        if (currentSetter != address(0)) {\\n            return (currentSetter, 0);\\n        }\\n\\n        try IOwnable(collection).owner() returns (address setter) {\\n            return (setter, 1);\\n        } catch {\\n            try IOwnable(collection).admin() returns (address setter) {\\n                return (setter, 2);\\n            } catch {\\n                return (address(0), 3);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update information and perform checks before updating royalty fee registry\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) internal {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n        require(currentSetter == address(0), \\\"Setter: Already set\\\");\\n\\n        require(\\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\\n            \\\"Setter: Not ERC721/ERC1155\\\"\\n        );\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5d4a64d6bcad9caaf0a161556627c2e5c456867cadc7f139861c470492269f74\",\"license\":\"MIT\"},\"contracts/royalties/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n\\n    function renounceOwnership() external returns (bool);\\n}\\n\",\"keccak256\":\"0x52761240da249af32b980239cb3d4de02bee5f1b5108b7a7a26f40606700cacb\",\"license\":\"MIT\"},\"contracts/royalties/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyInfoForNFTCollection(\\n        address collection,\\n        uint256 tokenId,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function royaltyFeeInfoNFTCollection(address collection, uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function royaltyInfo(\\n        address collection,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0x36e7585814e22a3d2c1817dbc4d4ed8a187e3fd9d08b2d35013ee181676caeb4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b9223c9d1161008c578063c16f515611610066578063c16f5156146102b3578063c54e5497146102bb578063e72ba45614610306578063f2fde38b1461032c576100ea565b8063b9223c9d14610252578063bbdf9b681461026f578063bc6bc0cd146102ab576100ea565b8063715018a6116100c8578063715018a6146101a65780638329b3a2146101ae5780638da5cb5b146101f2578063ab01667014610216576100ea565b8063275da5ef146100ef57806333bf61561461012d5780633755fa801461016a575b600080fd5b61012b6004803603608081101561010557600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610352565b005b610135610504565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b61012b6004803603608081101561018057600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561050f565b61012b6105e2565b61012b600480360360a08110156101c457600080fd5b506001600160a01b0381358116916020810135916040820135811691606081013590911690608001356106ad565b6101fa610871565b604080516001600160a01b039092168252519081900360200190f35b61012b6004803603608081101561022c57600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610880565b61012b6004803603602081101561026857600080fd5b5035610941565b61012b6004803603608081101561028557600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610a36565b610135610b61565b6101fa610b6c565b6102e1600480360360208110156102d157600080fd5b50356001600160a01b0316610b90565b604080516001600160a01b03909316835260ff90911660208301528051918290030190f35b61012b6004803603602081101561031c57600080fd5b50356001600160a01b0316610d3b565b61012b6004803603602081101561034257600080fd5b50356001600160a01b0316610e4d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e31ef91c866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060606040518083038186803b1580156103c157600080fd5b505afa1580156103d5573d6000803e3d6000fd5b505050506040513d60608110156103eb57600080fd5b50519050336001600160a01b0382161461044c576040805162461bcd60e51b815260206004820152601660248201527f5365747465723a204e6f74207468652073657474657200000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bbdf9b68868686866040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b1580156104e557600080fd5b505af11580156104f9573d6000803e3d6000fd5b505050505050505050565b636cdb3d1360e11b81565b836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054857600080fd5b505afa15801561055c573d6000803e3d6000fd5b505050506040513d602081101561057257600080fd5b50516001600160a01b031633146105d0576040805162461bcd60e51b815260206004820152601460248201527f4f776e65723a204e6f7420746865206f776e6572000000000000000000000000604482015290519081900360640190fd5b6105dc84848484610f6e565b50505050565b6105ea6111b1565b6001600160a01b03166105fb610871565b6001600160a01b031614610656576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a15c70587876040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060606040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d606081101561074e57600080fd5b505190506001600160a01b038116156107ae576040805162461bcd60e51b815260206004820152601560248201527f496e697465643a20706c732074727920616761696e0000000000000000000000604482015290519081900360640190fd5b604080517f8329b3a20000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201889052868116604483015285811660648301526084820185905291517f000000000000000000000000000000000000000000000000000000000000000090921691638329b3a29160a48082019260009290919082900301818387803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b031690565b836001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b957600080fd5b505afa1580156108cd573d6000803e3d6000fd5b505050506040513d60208110156108e357600080fd5b50516001600160a01b031633146105d0576040805162461bcd60e51b815260206004820152601460248201527f41646d696e3a204e6f74207468652061646d696e000000000000000000000000604482015290519081900360640190fd5b6109496111b1565b6001600160a01b031661095a610871565b6001600160a01b0316146109b5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9223c9d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610a1b57600080fd5b505af1158015610a2f573d6000803e3d6000fd5b5050505050565b610a3e6111b1565b6001600160a01b0316610a4f610871565b6001600160a01b031614610aaa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bbdf9b68858585856040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b5050505050505050565b6380ac58cd60e01b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e31ef91c856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060606040518083038186803b158015610c0257600080fd5b505afa158015610c16573d6000803e3d6000fd5b505050506040513d6060811015610c2c57600080fd5b505190506001600160a01b03811615610c4a57915060009050610d36565b836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8357600080fd5b505afa925050508015610ca857506040513d6020811015610ca357600080fd5b505160015b610d2957836001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce557600080fd5b505afa925050508015610d0a57506040513d6020811015610d0557600080fd5b505160015b610d1c57600060039250925050610d36565b925060029150610d369050565b925060019150610d369050565b915091565b610d436111b1565b6001600160a01b0316610d54610871565b6001600160a01b031614610daf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2fde38b826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b158015610e1e57600080fd5b505af1158015610e32573d6000803e3d6000fd5b505050506040513d6020811015610e4857600080fd5b505050565b610e556111b1565b6001600160a01b0316610e66610871565b6001600160a01b031614610ec1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610f065760405162461bcd60e51b81526004018080602001828103825260268152602001806111b66026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e31ef91c866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060606040518083038186803b158015610fdd57600080fd5b505afa158015610ff1573d6000803e3d6000fd5b505050506040513d606081101561100757600080fd5b505190506001600160a01b03811615611067576040805162461bcd60e51b815260206004820152601360248201527f5365747465723a20416c72656164792073657400000000000000000000000000604482015290519081900360640190fd5b604080516301ffc9a760e01b81526380ac58cd60e01b600482015290516001600160a01b038716916301ffc9a7916024808301926020929190829003018186803b1580156110b457600080fd5b505afa1580156110c8573d6000803e3d6000fd5b505050506040513d60208110156110de57600080fd5b5051806111605750604080516301ffc9a760e01b8152636cdb3d1360e11b600482015290516001600160a01b038716916301ffc9a7916024808301926020929190829003018186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d602081101561115d57600080fd5b50515b61044c576040805162461bcd60e51b815260206004820152601a60248201527f5365747465723a204e6f74204552433732312f45524331313535000000000000604482015290519081900360640190fd5b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212200ad72af79a0cf3a64817dd6c3ed6321dbb01c6c39397a213ab77b0bc0a41bd9a64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkForCollectionSetter(address)": {
        "params": {
          "collection": "collection address"
        },
        "returns": {
          "_0": "(whether there is a setter (address(0 if not)), Position 0: Royalty setter is set in the registry 1: ERC2981 and no setter 2: setter can be set using owner() 3: setter can be set using admin() 4: setter cannot be set, nor support for ERC2981"
        }
      },
      "constructor": {
        "params": {
          "_royaltyFeeRegistry": "address of the royalty fee registry"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwnerOfRoyaltyFeeRegistry(address)": {
        "details": "Can be used for migration of this royalty fee setter contract",
        "params": {
          "_owner": "new owner address"
        }
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "details": "Can only be called by contract owner (of this)",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)": {
        "details": "Only to be called if there is no setter address",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)": {
        "details": "Only to be called if there is no setter address",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)": {
        "details": "Only to be called if there msg.sender is the setter",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)": {
        "details": "Only to be called if there msg.sender is the setter",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver",
          "tokenId": "uint"
        }
      }
    },
    "title": "RoyaltyFeeSetter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkForCollectionSetter(address)": {
        "notice": "Check royalty info for collection"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "updateOwnerOfRoyaltyFeeRegistry(address)": {
        "notice": "Update owner of royalty fee registry"
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)": {
        "notice": "Update royalty info for collection if admin"
      },
      "updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)": {
        "notice": "Update royalty info for collection if owner"
      },
      "updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      }
    },
    "notice": "It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4453,
        "contract": "contracts/royalties/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}