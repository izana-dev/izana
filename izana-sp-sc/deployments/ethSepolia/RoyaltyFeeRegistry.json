{
  "address": "0xCc41B9c93504C99f4d8C32553EA60758A8d8b39E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "NFTRoyaltyFeeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "NewRoyaltyFeeLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyFeeUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "royaltyFeeInfoCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyFeeInfoNFTCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyFeeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForNFTCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd04662ea29516384eb23328a823251279e8ba93689017e0872c5000920a7cd82",
  "receipt": {
    "to": null,
    "from": "0x84B78673f8DC0086c9A475fbf9C6B40b5a92d48B",
    "contractAddress": "0xCc41B9c93504C99f4d8C32553EA60758A8d8b39E",
    "transactionIndex": 55,
    "gasUsed": "666689",
    "logsBloom": "0x
    "blockHash": "0x71b9d8e052a83e71aa9ee921d07027c1f58e06e53a140ca6be37f95865be8c07",
    "transactionHash": "0xd04662ea29516384eb23328a823251279e8ba93689017e0872c5000920a7cd82",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 6152206,
        "transactionHash": "0xd04662ea29516384eb23328a823251279e8ba93689017e0872c5000920a7cd82",
        "address": "0xCc41B9c93504C99f4d8C32553EA60758A8d8b39E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084b78673f8dc0086c9a475fbf9c6b40b5a92d48b"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0x71b9d8e052a83e71aa9ee921d07027c1f58e06e53a140ca6be37f95865be8c07"
      }
    ],
    "blockNumber": 6152206,
    "cumulativeGasUsed": "8983349",
    "status": 1,
    "byzantium": true
  },
  "args": [
    3000
  ],
  "numDeployments": 1,
  "solcInputHash": "90ce8ac33db5a5561a6dddc82de03511",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NFTRoyaltyFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"NewRoyaltyFeeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"royaltyFeeInfoCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyFeeInfoNFTCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyFeeInfoCollection(address)\":{\"params\":{\"collection\":\"collection address\"}},\"royaltyFeeInfoNFTCollection(address,uint256)\":{\"params\":{\"collection\":\"collection address\",\"tokenId\":\"uint256\"}},\"royaltyInfo(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount\",\"collection\":\"collection address\"},\"returns\":{\"_0\":\"receiver address and amount received by royalty recipient\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRoyaltyFeeLimit(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)\":{\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\",\"tokenId\":\"string number tokenId gen\"}}},\"title\":\"RoyaltyFeeRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"royaltyFeeInfoCollection(address)\":{\"notice\":\"View royalty info for a collection address\"},\"royaltyFeeInfoNFTCollection(address,uint256)\":{\"notice\":\"View royalty info for a collection address\"},\"royaltyInfo(address,uint256,uint256)\":{\"notice\":\"Calculate royalty info for a collection address and a sale gross amount\"},\"updateRoyaltyFeeLimit(uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"}},\"notice\":\"It is a royalty fee registry for the Helixmeta exchange.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/royalties/RoyaltyFeeRegistry.sol\":\"RoyaltyFeeRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/royalties/RoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeRegistry\\n * @notice It is a royalty fee registry for the Helixmeta exchange.\\n */\\ncontract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, Ownable {\\n    struct FeeInfo {\\n        address setter;\\n        address receiver;\\n        uint256 fee;\\n    }\\n\\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\\n    uint256 public royaltyFeeLimit;\\n\\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\\n    mapping(address => mapping(uint256 => FeeInfo))\\n        private _royaltyFeeInfoNFTCollection;\\n\\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\\n    event RoyaltyFeeUpdate(\\n        address indexed collection,\\n        address indexed setter,\\n        address indexed receiver,\\n        uint256 fee\\n    );\\n\\n    event NFTRoyaltyFeeUpdate(\\n        uint256 indexed tokenId,\\n        address indexed setter,\\n        address indexed receiver,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    constructor(uint256 _royaltyFeeLimit) {\\n        require(_royaltyFeeLimit <= 9500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_royaltyFeeLimit <= 9500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n\\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external override onlyOwner {\\n        require(fee <= royaltyFeeLimit, \\\"Registry: Royalty fee too high\\\");\\n        _royaltyFeeInfoCollection[collection] = FeeInfo({\\n            setter: setter,\\n            receiver: receiver,\\n            fee: fee\\n        });\\n\\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param collection address of the NFT contract\\n     * @param tokenId string number tokenId gen\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForNFTCollection(\\n        address collection,\\n        uint256 tokenId,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external override onlyOwner {\\n        require(fee <= royaltyFeeLimit, \\\"Registry: Royalty fee too high\\\");\\n        _royaltyFeeInfoNFTCollection[collection][tokenId] = FeeInfo({\\n            setter: setter,\\n            receiver: receiver,\\n            fee: fee\\n        });\\n\\n        emit NFTRoyaltyFeeUpdate(tokenId, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty info for a collection address and a sale gross amount\\n     * @param collection collection address\\n     * @param amount amount\\n     * @return receiver address and amount received by royalty recipient\\n     */\\n    function royaltyInfo(\\n        address collection,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external view override returns (address, uint256) {\\n        if (\\n            _royaltyFeeInfoNFTCollection[collection][tokenId].receiver !=\\n            address(0)\\n        ) {\\n            return (\\n                _royaltyFeeInfoNFTCollection[collection][tokenId].receiver,\\n                (amount *\\n                    _royaltyFeeInfoNFTCollection[collection][tokenId].fee) /\\n                    10000\\n            );\\n        }\\n        return (\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\\n        );\\n    }\\n\\n    /**\\n     * @notice View royalty info for a collection address\\n     * @param collection collection address\\n     */\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (\\n            _royaltyFeeInfoCollection[collection].setter,\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            _royaltyFeeInfoCollection[collection].fee\\n        );\\n    }\\n\\n     /**\\n     * @notice View royalty info for a collection address\\n     * @param collection collection address\\n     * @param tokenId uint256\\n     */\\n    function royaltyFeeInfoNFTCollection(address collection, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (\\n            _royaltyFeeInfoNFTCollection[collection][tokenId].setter,\\n            _royaltyFeeInfoNFTCollection[collection][tokenId].receiver,\\n            _royaltyFeeInfoNFTCollection[collection][tokenId].fee\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe832b0e615343a7670c1da76fdab012bc697b030153352c98604a2aac91b564c\",\"license\":\"MIT\"},\"contracts/royalties/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyInfoForNFTCollection(\\n        address collection,\\n        uint256 tokenId,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function royaltyFeeInfoNFTCollection(address collection, uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function royaltyInfo(\\n        address collection,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0x36e7585814e22a3d2c1817dbc4d4ed8a187e3fd9d08b2d35013ee181676caeb4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b36380380610b368339818101604052602081101561003357600080fd5b5051600061003f6100d2565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061251c8111156100ca5760405162461bcd60e51b8152600401808060200182810382526021815260200180610b156021913960400191505060405180910390fd5b6001556100d6565b3390565b610a30806100e56000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063bbdf9b681161005b578063bbdf9b6814610217578063e31ef91c14610253578063f2fde38b14610279576100be565b80638da5cb5b146101d6578063b9223c9d146101fa576100be565b8063538bd5ea116100a7578063538bd5ea14610133578063715018a6146101885780638329b3a214610192576100be565b80630a15c705146100c35780634fb7d3f914610119575b600080fd5b6100ef600480360360408110156100d957600080fd5b506001600160a01b03813516906020013561029f565b604080516001600160a01b0394851681529290931660208301528183015290519081900360600190f35b6101216102db565b60408051918252519081900360200190f35b6101656004803603606081101561014957600080fd5b506001600160a01b0381351690602081013590604001356102e1565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61019061038c565b005b610190600480360360a08110156101a857600080fd5b506001600160a01b038135811691602081013591604082013581169160608101359091169060800135610457565b6101de6105e1565b604080516001600160a01b039092168252519081900360200190f35b6101906004803603602081101561021057600080fd5b50356105f0565b6101906004803603608081101561022d57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356106e0565b6100ef6004803603602081101561026957600080fd5b50356001600160a01b031661085d565b6101906004803603602081101561028f57600080fd5b50356001600160a01b031661088e565b6001600160a01b039182166000908152600360209081526040808320938352929052208054600182015460029092015490831693919092169190565b60015481565b6001600160a01b0383811660009081526003602090815260408083208584529091528120600101549091829116156103535750506001600160a01b0383811660009081526003602090815260408083208584529091529020600181015460029091015491169061271090840204610384565b50506001600160a01b0383811660009081526002602081905260409091206001810154910154911690612710908402045b935093915050565b6103946109af565b6001600160a01b03166103a56105e1565b6001600160a01b031614610400576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61045f6109af565b6001600160a01b03166104706105e1565b6001600160a01b0316146104cb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600154811115610522576040805162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f20686967680000604482015290519081900360640190fd5b604080516060810182526001600160a01b0380861680835285821660208085018281528587018881528c86166000908152600384528881208d825284528890209651875490871673ffffffffffffffffffffffffffffffffffffffff199182161788559151600188018054919097169216919091179094559251600290940193909355835185815293519293909288927fa789742fe7c17220d7f5cde31947f11f07afb6b40c1872dd31b966620f3ff96a928290030190a45050505050565b6000546001600160a01b031690565b6105f86109af565b6001600160a01b03166106096105e1565b6001600160a01b031614610664576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61251c8111156106a55760405162461bcd60e51b81526004018080602001828103825260218152602001806109da6021913960400191505060405180910390fd5b60018190556040805182815290517f2da7166c72ef3860ef4fb2571105533c40615269a6dbc38ce0b264910df1c2569181900360200190a150565b6106e86109af565b6001600160a01b03166106f96105e1565b6001600160a01b031614610754576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001548111156107ab576040805162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f20686967680000604482015290519081900360640190fd5b604080516060810182526001600160a01b0380861680835285821660208085018281528587018881528b861660008181526002808652908a90209851895490891673ffffffffffffffffffffffffffffffffffffffff19918216178a55935160018a018054919099169416939093179096555195019490945584518681529451909491937fd01984afa6e37420452e575e7d99dd7e632b3ec8ea2adec998475b76ca494d64928290030190a450505050565b6001600160a01b03908116600090815260026020819052604090912080546001820154919092015491831693921691565b6108966109af565b6001600160a01b03166108a76105e1565b6001600160a01b031614610902576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166109475760405162461bcd60e51b81526004018080602001828103825260268152602001806109b46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e65723a20526f79616c747920666565206c696d697420746f6f2068696768a2646970667358221220b163955c4a6f9bd5e5e06187714c4f682aa076f328a3a7932a3a2e45be7249af64736f6c634300070500334f776e65723a20526f79616c747920666565206c696d697420746f6f2068696768",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063bbdf9b681161005b578063bbdf9b6814610217578063e31ef91c14610253578063f2fde38b14610279576100be565b80638da5cb5b146101d6578063b9223c9d146101fa576100be565b8063538bd5ea116100a7578063538bd5ea14610133578063715018a6146101885780638329b3a214610192576100be565b80630a15c705146100c35780634fb7d3f914610119575b600080fd5b6100ef600480360360408110156100d957600080fd5b506001600160a01b03813516906020013561029f565b604080516001600160a01b0394851681529290931660208301528183015290519081900360600190f35b6101216102db565b60408051918252519081900360200190f35b6101656004803603606081101561014957600080fd5b506001600160a01b0381351690602081013590604001356102e1565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61019061038c565b005b610190600480360360a08110156101a857600080fd5b506001600160a01b038135811691602081013591604082013581169160608101359091169060800135610457565b6101de6105e1565b604080516001600160a01b039092168252519081900360200190f35b6101906004803603602081101561021057600080fd5b50356105f0565b6101906004803603608081101561022d57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356106e0565b6100ef6004803603602081101561026957600080fd5b50356001600160a01b031661085d565b6101906004803603602081101561028f57600080fd5b50356001600160a01b031661088e565b6001600160a01b039182166000908152600360209081526040808320938352929052208054600182015460029092015490831693919092169190565b60015481565b6001600160a01b0383811660009081526003602090815260408083208584529091528120600101549091829116156103535750506001600160a01b0383811660009081526003602090815260408083208584529091529020600181015460029091015491169061271090840204610384565b50506001600160a01b0383811660009081526002602081905260409091206001810154910154911690612710908402045b935093915050565b6103946109af565b6001600160a01b03166103a56105e1565b6001600160a01b031614610400576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61045f6109af565b6001600160a01b03166104706105e1565b6001600160a01b0316146104cb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600154811115610522576040805162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f20686967680000604482015290519081900360640190fd5b604080516060810182526001600160a01b0380861680835285821660208085018281528587018881528c86166000908152600384528881208d825284528890209651875490871673ffffffffffffffffffffffffffffffffffffffff199182161788559151600188018054919097169216919091179094559251600290940193909355835185815293519293909288927fa789742fe7c17220d7f5cde31947f11f07afb6b40c1872dd31b966620f3ff96a928290030190a45050505050565b6000546001600160a01b031690565b6105f86109af565b6001600160a01b03166106096105e1565b6001600160a01b031614610664576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61251c8111156106a55760405162461bcd60e51b81526004018080602001828103825260218152602001806109da6021913960400191505060405180910390fd5b60018190556040805182815290517f2da7166c72ef3860ef4fb2571105533c40615269a6dbc38ce0b264910df1c2569181900360200190a150565b6106e86109af565b6001600160a01b03166106f96105e1565b6001600160a01b031614610754576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001548111156107ab576040805162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f20686967680000604482015290519081900360640190fd5b604080516060810182526001600160a01b0380861680835285821660208085018281528587018881528b861660008181526002808652908a90209851895490891673ffffffffffffffffffffffffffffffffffffffff19918216178a55935160018a018054919099169416939093179096555195019490945584518681529451909491937fd01984afa6e37420452e575e7d99dd7e632b3ec8ea2adec998475b76ca494d64928290030190a450505050565b6001600160a01b03908116600090815260026020819052604090912080546001820154919092015491831693921691565b6108966109af565b6001600160a01b03166108a76105e1565b6001600160a01b031614610902576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166109475760405162461bcd60e51b81526004018080602001828103825260268152602001806109b46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e65723a20526f79616c747920666565206c696d697420746f6f2068696768a2646970667358221220b163955c4a6f9bd5e5e06187714c4f682aa076f328a3a7932a3a2e45be7249af64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyFeeInfoCollection(address)": {
        "params": {
          "collection": "collection address"
        }
      },
      "royaltyFeeInfoNFTCollection(address,uint256)": {
        "params": {
          "collection": "collection address",
          "tokenId": "uint256"
        }
      },
      "royaltyInfo(address,uint256,uint256)": {
        "params": {
          "amount": "amount",
          "collection": "collection address"
        },
        "returns": {
          "_0": "receiver address and amount received by royalty recipient"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)": {
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver",
          "tokenId": "string number tokenId gen"
        }
      }
    },
    "title": "RoyaltyFeeRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "royaltyFeeInfoCollection(address)": {
        "notice": "View royalty info for a collection address"
      },
      "royaltyFeeInfoNFTCollection(address,uint256)": {
        "notice": "View royalty info for a collection address"
      },
      "royaltyInfo(address,uint256,uint256)": {
        "notice": "Calculate royalty info for a collection address and a sale gross amount"
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForNFTCollection(address,uint256,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      }
    },
    "notice": "It is a royalty fee registry for the Helixmeta exchange.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4453,
        "contract": "contracts/royalties/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15584,
        "contract": "contracts/royalties/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "royaltyFeeLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 15588,
        "contract": "contracts/royalties/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_royaltyFeeInfoCollection",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(FeeInfo)15582_storage)"
      },
      {
        "astId": 15594,
        "contract": "contracts/royalties/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_royaltyFeeInfoNFTCollection",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(FeeInfo)15582_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(FeeInfo)15582_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct RoyaltyFeeRegistry.FeeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(FeeInfo)15582_storage)"
      },
      "t_mapping(t_address,t_struct(FeeInfo)15582_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoyaltyFeeRegistry.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)15582_storage"
      },
      "t_mapping(t_uint256,t_struct(FeeInfo)15582_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RoyaltyFeeRegistry.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)15582_storage"
      },
      "t_struct(FeeInfo)15582_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltyFeeRegistry.FeeInfo",
        "members": [
          {
            "astId": 15577,
            "contract": "contracts/royalties/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "setter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15579,
            "contract": "contracts/royalties/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15581,
            "contract": "contracts/royalties/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}